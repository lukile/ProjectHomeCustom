/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// WidgetDTO
    /// </summary>
    [DataContract]
    public partial class WidgetDTO :  IEquatable<WidgetDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WidgetDTO" /> class.
        /// </summary>
        /// <param name="widgetId">widgetId.</param>
        /// <param name="type">type.</param>
        /// <param name="name">name.</param>
        /// <param name="visibility">visibility (default to false).</param>
        /// <param name="label">label.</param>
        /// <param name="icon">icon.</param>
        /// <param name="labelcolor">labelcolor.</param>
        /// <param name="valuecolor">valuecolor.</param>
        /// <param name="mappings">mappings.</param>
        /// <param name="switchSupport">switchSupport (default to false).</param>
        /// <param name="sendFrequency">sendFrequency.</param>
        /// <param name="separator">separator.</param>
        /// <param name="refresh">refresh.</param>
        /// <param name="height">height.</param>
        /// <param name="minValue">minValue.</param>
        /// <param name="maxValue">maxValue.</param>
        /// <param name="step">step.</param>
        /// <param name="url">url.</param>
        /// <param name="encoding">encoding.</param>
        /// <param name="service">service.</param>
        /// <param name="period">period.</param>
        /// <param name="legend">legend (default to false).</param>
        /// <param name="state">state.</param>
        /// <param name="item">item.</param>
        /// <param name="linkedPage">linkedPage.</param>
        /// <param name="widgets">widgets.</param>
        public WidgetDTO(string widgetId = default(string), string type = default(string), string name = default(string), bool? visibility = false, string label = default(string), string icon = default(string), string labelcolor = default(string), string valuecolor = default(string), List<MappingDTO> mappings = default(List<MappingDTO>), bool? switchSupport = false, int? sendFrequency = default(int?), string separator = default(string), int? refresh = default(int?), int? height = default(int?), decimal? minValue = default(decimal?), decimal? maxValue = default(decimal?), decimal? step = default(decimal?), string url = default(string), string encoding = default(string), string service = default(string), string period = default(string), bool? legend = false, string state = default(string), EnrichedItemDTO item = default(EnrichedItemDTO), PageDTO linkedPage = default(PageDTO), List<WidgetDTO> widgets = default(List<WidgetDTO>))
        {
            WidgetId = widgetId;
            Type = type;
            Name = name;
            // use default value if no "visibility" provided
            if (visibility == null)
            {
                Visibility = false;
            }
            else
            {
                Visibility = visibility;
            }
            Label = label;
            Icon = icon;
            Labelcolor = labelcolor;
            Valuecolor = valuecolor;
            Mappings = mappings;
            // use default value if no "switchSupport" provided
            if (switchSupport == null)
            {
                SwitchSupport = false;
            }
            else
            {
                SwitchSupport = switchSupport;
            }
            SendFrequency = sendFrequency;
            Separator = separator;
            Refresh = refresh;
            Height = height;
            MinValue = minValue;
            MaxValue = maxValue;
            Step = step;
            Url = url;
            Encoding = encoding;
            Service = service;
            Period = period;
            // use default value if no "legend" provided
            if (legend == null)
            {
                Legend = false;
            }
            else
            {
                Legend = legend;
            }
            State = state;
            Item = item;
            LinkedPage = linkedPage;
            Widgets = widgets;
        }
        
        /// <summary>
        /// Gets or Sets WidgetId
        /// </summary>
        [DataMember(Name="widgetId", EmitDefaultValue=false)]
        public string WidgetId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public bool? Visibility { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Labelcolor
        /// </summary>
        [DataMember(Name="labelcolor", EmitDefaultValue=false)]
        public string Labelcolor { get; set; }

        /// <summary>
        /// Gets or Sets Valuecolor
        /// </summary>
        [DataMember(Name="valuecolor", EmitDefaultValue=false)]
        public string Valuecolor { get; set; }

        /// <summary>
        /// Gets or Sets Mappings
        /// </summary>
        [DataMember(Name="mappings", EmitDefaultValue=false)]
        public List<MappingDTO> Mappings { get; set; }

        /// <summary>
        /// Gets or Sets SwitchSupport
        /// </summary>
        [DataMember(Name="switchSupport", EmitDefaultValue=false)]
        public bool? SwitchSupport { get; set; }

        /// <summary>
        /// Gets or Sets SendFrequency
        /// </summary>
        [DataMember(Name="sendFrequency", EmitDefaultValue=false)]
        public int? SendFrequency { get; set; }

        /// <summary>
        /// Gets or Sets Separator
        /// </summary>
        [DataMember(Name="separator", EmitDefaultValue=false)]
        public string Separator { get; set; }

        /// <summary>
        /// Gets or Sets Refresh
        /// </summary>
        [DataMember(Name="refresh", EmitDefaultValue=false)]
        public int? Refresh { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name="minValue", EmitDefaultValue=false)]
        public decimal? MinValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name="maxValue", EmitDefaultValue=false)]
        public decimal? MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step", EmitDefaultValue=false)]
        public decimal? Step { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [DataMember(Name="encoding", EmitDefaultValue=false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public string Service { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public string Period { get; set; }

        /// <summary>
        /// Gets or Sets Legend
        /// </summary>
        [DataMember(Name="legend", EmitDefaultValue=false)]
        public bool? Legend { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name="item", EmitDefaultValue=false)]
        public EnrichedItemDTO Item { get; set; }

        /// <summary>
        /// Gets or Sets LinkedPage
        /// </summary>
        [DataMember(Name="linkedPage", EmitDefaultValue=false)]
        public PageDTO LinkedPage { get; set; }

        /// <summary>
        /// Gets or Sets Widgets
        /// </summary>
        [DataMember(Name="widgets", EmitDefaultValue=false)]
        public List<WidgetDTO> Widgets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WidgetDTO {\n");
            sb.Append("  WidgetId: ").Append(WidgetId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Labelcolor: ").Append(Labelcolor).Append("\n");
            sb.Append("  Valuecolor: ").Append(Valuecolor).Append("\n");
            sb.Append("  Mappings: ").Append(Mappings).Append("\n");
            sb.Append("  SwitchSupport: ").Append(SwitchSupport).Append("\n");
            sb.Append("  SendFrequency: ").Append(SendFrequency).Append("\n");
            sb.Append("  Separator: ").Append(Separator).Append("\n");
            sb.Append("  Refresh: ").Append(Refresh).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Legend: ").Append(Legend).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  LinkedPage: ").Append(LinkedPage).Append("\n");
            sb.Append("  Widgets: ").Append(Widgets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as WidgetDTO);
        }

        /// <summary>
        /// Returns true if WidgetDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of WidgetDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WidgetDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    WidgetId == input.WidgetId ||
                    (WidgetId != null &&
                    WidgetId.Equals(input.WidgetId))
                ) && 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Visibility == input.Visibility ||
                    (Visibility != null &&
                    Visibility.Equals(input.Visibility))
                ) && 
                (
                    Label == input.Label ||
                    (Label != null &&
                    Label.Equals(input.Label))
                ) && 
                (
                    Icon == input.Icon ||
                    (Icon != null &&
                    Icon.Equals(input.Icon))
                ) && 
                (
                    Labelcolor == input.Labelcolor ||
                    (Labelcolor != null &&
                    Labelcolor.Equals(input.Labelcolor))
                ) && 
                (
                    Valuecolor == input.Valuecolor ||
                    (Valuecolor != null &&
                    Valuecolor.Equals(input.Valuecolor))
                ) && 
                (
                    Mappings == input.Mappings ||
                    Mappings != null &&
                    Mappings.SequenceEqual(input.Mappings)
                ) && 
                (
                    SwitchSupport == input.SwitchSupport ||
                    (SwitchSupport != null &&
                    SwitchSupport.Equals(input.SwitchSupport))
                ) && 
                (
                    SendFrequency == input.SendFrequency ||
                    (SendFrequency != null &&
                    SendFrequency.Equals(input.SendFrequency))
                ) && 
                (
                    Separator == input.Separator ||
                    (Separator != null &&
                    Separator.Equals(input.Separator))
                ) && 
                (
                    Refresh == input.Refresh ||
                    (Refresh != null &&
                    Refresh.Equals(input.Refresh))
                ) && 
                (
                    Height == input.Height ||
                    (Height != null &&
                    Height.Equals(input.Height))
                ) && 
                (
                    MinValue == input.MinValue ||
                    (MinValue != null &&
                    MinValue.Equals(input.MinValue))
                ) && 
                (
                    MaxValue == input.MaxValue ||
                    (MaxValue != null &&
                    MaxValue.Equals(input.MaxValue))
                ) && 
                (
                    Step == input.Step ||
                    (Step != null &&
                    Step.Equals(input.Step))
                ) && 
                (
                    Url == input.Url ||
                    (Url != null &&
                    Url.Equals(input.Url))
                ) && 
                (
                    Encoding == input.Encoding ||
                    (Encoding != null &&
                    Encoding.Equals(input.Encoding))
                ) && 
                (
                    Service == input.Service ||
                    (Service != null &&
                    Service.Equals(input.Service))
                ) && 
                (
                    Period == input.Period ||
                    (Period != null &&
                    Period.Equals(input.Period))
                ) && 
                (
                    Legend == input.Legend ||
                    (Legend != null &&
                    Legend.Equals(input.Legend))
                ) && 
                (
                    State == input.State ||
                    (State != null &&
                    State.Equals(input.State))
                ) && 
                (
                    Item == input.Item ||
                    (Item != null &&
                    Item.Equals(input.Item))
                ) && 
                (
                    LinkedPage == input.LinkedPage ||
                    (LinkedPage != null &&
                    LinkedPage.Equals(input.LinkedPage))
                ) && 
                (
                    Widgets == input.Widgets ||
                    Widgets != null &&
                    Widgets.SequenceEqual(input.Widgets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (WidgetId != null)
                    hashCode = hashCode * 59 + WidgetId.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Visibility != null)
                    hashCode = hashCode * 59 + Visibility.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Icon != null)
                    hashCode = hashCode * 59 + Icon.GetHashCode();
                if (Labelcolor != null)
                    hashCode = hashCode * 59 + Labelcolor.GetHashCode();
                if (Valuecolor != null)
                    hashCode = hashCode * 59 + Valuecolor.GetHashCode();
                if (Mappings != null)
                    hashCode = hashCode * 59 + Mappings.GetHashCode();
                if (SwitchSupport != null)
                    hashCode = hashCode * 59 + SwitchSupport.GetHashCode();
                if (SendFrequency != null)
                    hashCode = hashCode * 59 + SendFrequency.GetHashCode();
                if (Separator != null)
                    hashCode = hashCode * 59 + Separator.GetHashCode();
                if (Refresh != null)
                    hashCode = hashCode * 59 + Refresh.GetHashCode();
                if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                if (MinValue != null)
                    hashCode = hashCode * 59 + MinValue.GetHashCode();
                if (MaxValue != null)
                    hashCode = hashCode * 59 + MaxValue.GetHashCode();
                if (Step != null)
                    hashCode = hashCode * 59 + Step.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (Encoding != null)
                    hashCode = hashCode * 59 + Encoding.GetHashCode();
                if (Service != null)
                    hashCode = hashCode * 59 + Service.GetHashCode();
                if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                if (Legend != null)
                    hashCode = hashCode * 59 + Legend.GetHashCode();
                if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                if (LinkedPage != null)
                    hashCode = hashCode * 59 + LinkedPage.GetHashCode();
                if (Widgets != null)
                    hashCode = hashCode * 59 + Widgets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
