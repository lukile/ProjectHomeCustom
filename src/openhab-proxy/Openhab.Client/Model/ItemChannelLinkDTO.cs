/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// ItemChannelLinkDTO
    /// </summary>
    [DataContract]
    public partial class ItemChannelLinkDTO :  IEquatable<ItemChannelLinkDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemChannelLinkDTO" /> class.
        /// </summary>
        /// <param name="itemName">itemName.</param>
        /// <param name="channelUID">channelUID.</param>
        /// <param name="configuration">configuration.</param>
        public ItemChannelLinkDTO(string itemName = default(string), string channelUID = default(string), Dictionary<string, object> configuration = default(Dictionary<string, object>))
        {
            ItemName = itemName;
            ChannelUID = channelUID;
            Configuration = configuration;
        }
        
        /// <summary>
        /// Gets or Sets ItemName
        /// </summary>
        [DataMember(Name="itemName", EmitDefaultValue=false)]
        public string ItemName { get; set; }

        /// <summary>
        /// Gets or Sets ChannelUID
        /// </summary>
        [DataMember(Name="channelUID", EmitDefaultValue=false)]
        public string ChannelUID { get; set; }

        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public Dictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemChannelLinkDTO {\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ChannelUID: ").Append(ChannelUID).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ItemChannelLinkDTO);
        }

        /// <summary>
        /// Returns true if ItemChannelLinkDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemChannelLinkDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemChannelLinkDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    ItemName == input.ItemName ||
                    (ItemName != null &&
                    ItemName.Equals(input.ItemName))
                ) && 
                (
                    ChannelUID == input.ChannelUID ||
                    (ChannelUID != null &&
                    ChannelUID.Equals(input.ChannelUID))
                ) && 
                (
                    Configuration == input.Configuration ||
                    Configuration != null &&
                    Configuration.SequenceEqual(input.Configuration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (ItemName != null)
                    hashCode = hashCode * 59 + ItemName.GetHashCode();
                if (ChannelUID != null)
                    hashCode = hashCode * 59 + ChannelUID.GetHashCode();
                if (Configuration != null)
                    hashCode = hashCode * 59 + Configuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
