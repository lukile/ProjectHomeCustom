/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// ChannelTypeDTO
    /// </summary>
    [DataContract]
    public partial class ChannelTypeDTO :  IEquatable<ChannelTypeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelTypeDTO" /> class.
        /// </summary>
        /// <param name="parameters">parameters.</param>
        /// <param name="parameterGroups">parameterGroups.</param>
        /// <param name="description">description.</param>
        /// <param name="label">label.</param>
        /// <param name="category">category.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="kind">kind.</param>
        /// <param name="stateDescription">stateDescription.</param>
        /// <param name="tags">tags.</param>
        /// <param name="uID">uID.</param>
        /// <param name="advanced">advanced (default to false).</param>
        /// <param name="commandDescription">commandDescription.</param>
        public ChannelTypeDTO(List<ConfigDescriptionParameterDTO> parameters = default(List<ConfigDescriptionParameterDTO>), List<ConfigDescriptionParameterGroupDTO> parameterGroups = default(List<ConfigDescriptionParameterGroupDTO>), string description = default(string), string label = default(string), string category = default(string), string itemType = default(string), string kind = default(string), StateDescription stateDescription = default(StateDescription), List<string> tags = default(List<string>), string uID = default(string), bool? advanced = false, CommandDescription commandDescription = default(CommandDescription))
        {
            Parameters = parameters;
            ParameterGroups = parameterGroups;
            Description = description;
            Label = label;
            Category = category;
            ItemType = itemType;
            Kind = kind;
            StateDescription = stateDescription;
            Tags = tags;
            UID = uID;
            // use default value if no "advanced" provided
            if (advanced == null)
            {
                Advanced = false;
            }
            else
            {
                Advanced = advanced;
            }
            CommandDescription = commandDescription;
        }
        
        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public List<ConfigDescriptionParameterDTO> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets ParameterGroups
        /// </summary>
        [DataMember(Name="parameterGroups", EmitDefaultValue=false)]
        public List<ConfigDescriptionParameterGroupDTO> ParameterGroups { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="itemType", EmitDefaultValue=false)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or Sets StateDescription
        /// </summary>
        [DataMember(Name="stateDescription", EmitDefaultValue=false)]
        public StateDescription StateDescription { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets UID
        /// </summary>
        [DataMember(Name="UID", EmitDefaultValue=false)]
        public string UID { get; set; }

        /// <summary>
        /// Gets or Sets Advanced
        /// </summary>
        [DataMember(Name="advanced", EmitDefaultValue=false)]
        public bool? Advanced { get; set; }

        /// <summary>
        /// Gets or Sets CommandDescription
        /// </summary>
        [DataMember(Name="commandDescription", EmitDefaultValue=false)]
        public CommandDescription CommandDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelTypeDTO {\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  ParameterGroups: ").Append(ParameterGroups).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  StateDescription: ").Append(StateDescription).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  UID: ").Append(UID).Append("\n");
            sb.Append("  Advanced: ").Append(Advanced).Append("\n");
            sb.Append("  CommandDescription: ").Append(CommandDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ChannelTypeDTO);
        }

        /// <summary>
        /// Returns true if ChannelTypeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelTypeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelTypeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    Parameters == input.Parameters ||
                    Parameters != null &&
                    Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    ParameterGroups == input.ParameterGroups ||
                    ParameterGroups != null &&
                    ParameterGroups.SequenceEqual(input.ParameterGroups)
                ) && 
                (
                    Description == input.Description ||
                    (Description != null &&
                    Description.Equals(input.Description))
                ) && 
                (
                    Label == input.Label ||
                    (Label != null &&
                    Label.Equals(input.Label))
                ) && 
                (
                    Category == input.Category ||
                    (Category != null &&
                    Category.Equals(input.Category))
                ) && 
                (
                    ItemType == input.ItemType ||
                    (ItemType != null &&
                    ItemType.Equals(input.ItemType))
                ) && 
                (
                    Kind == input.Kind ||
                    (Kind != null &&
                    Kind.Equals(input.Kind))
                ) && 
                (
                    StateDescription == input.StateDescription ||
                    (StateDescription != null &&
                    StateDescription.Equals(input.StateDescription))
                ) && 
                (
                    Tags == input.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    UID == input.UID ||
                    (UID != null &&
                    UID.Equals(input.UID))
                ) && 
                (
                    Advanced == input.Advanced ||
                    (Advanced != null &&
                    Advanced.Equals(input.Advanced))
                ) && 
                (
                    CommandDescription == input.CommandDescription ||
                    (CommandDescription != null &&
                    CommandDescription.Equals(input.CommandDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Parameters != null)
                    hashCode = hashCode * 59 + Parameters.GetHashCode();
                if (ParameterGroups != null)
                    hashCode = hashCode * 59 + ParameterGroups.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (ItemType != null)
                    hashCode = hashCode * 59 + ItemType.GetHashCode();
                if (Kind != null)
                    hashCode = hashCode * 59 + Kind.GetHashCode();
                if (StateDescription != null)
                    hashCode = hashCode * 59 + StateDescription.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                if (UID != null)
                    hashCode = hashCode * 59 + UID.GetHashCode();
                if (Advanced != null)
                    hashCode = hashCode * 59 + Advanced.GetHashCode();
                if (CommandDescription != null)
                    hashCode = hashCode * 59 + CommandDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
