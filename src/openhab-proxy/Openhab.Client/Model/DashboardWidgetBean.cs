/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// DashboardWidgetBean
    /// </summary>
    [DataContract]
    public partial class DashboardWidgetBean :  IEquatable<DashboardWidgetBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardWidgetBean" /> class.
        /// </summary>
        /// <param name="col">col.</param>
        /// <param name="row">row.</param>
        /// <param name="sizeX">sizeX.</param>
        /// <param name="sizeY">sizeY.</param>
        /// <param name="type">type.</param>
        /// <param name="options">options.</param>
        public DashboardWidgetBean(int? col = default(int?), int? row = default(int?), int? sizeX = default(int?), int? sizeY = default(int?), string type = default(string), DashboardWidgetOptionsBean options = default(DashboardWidgetOptionsBean))
        {
            Col = col;
            Row = row;
            SizeX = sizeX;
            SizeY = sizeY;
            Type = type;
            Options = options;
        }
        
        /// <summary>
        /// Gets or Sets Col
        /// </summary>
        [DataMember(Name="col", EmitDefaultValue=false)]
        public int? Col { get; set; }

        /// <summary>
        /// Gets or Sets Row
        /// </summary>
        [DataMember(Name="row", EmitDefaultValue=false)]
        public int? Row { get; set; }

        /// <summary>
        /// Gets or Sets SizeX
        /// </summary>
        [DataMember(Name="sizeX", EmitDefaultValue=false)]
        public int? SizeX { get; set; }

        /// <summary>
        /// Gets or Sets SizeY
        /// </summary>
        [DataMember(Name="sizeY", EmitDefaultValue=false)]
        public int? SizeY { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public DashboardWidgetOptionsBean Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DashboardWidgetBean {\n");
            sb.Append("  Col: ").Append(Col).Append("\n");
            sb.Append("  Row: ").Append(Row).Append("\n");
            sb.Append("  SizeX: ").Append(SizeX).Append("\n");
            sb.Append("  SizeY: ").Append(SizeY).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DashboardWidgetBean);
        }

        /// <summary>
        /// Returns true if DashboardWidgetBean instances are equal
        /// </summary>
        /// <param name="input">Instance of DashboardWidgetBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardWidgetBean input)
        {
            if (input == null)
                return false;

            return 
                (
                    Col == input.Col ||
                    (Col != null &&
                    Col.Equals(input.Col))
                ) && 
                (
                    Row == input.Row ||
                    (Row != null &&
                    Row.Equals(input.Row))
                ) && 
                (
                    SizeX == input.SizeX ||
                    (SizeX != null &&
                    SizeX.Equals(input.SizeX))
                ) && 
                (
                    SizeY == input.SizeY ||
                    (SizeY != null &&
                    SizeY.Equals(input.SizeY))
                ) && 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    Options == input.Options ||
                    (Options != null &&
                    Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Col != null)
                    hashCode = hashCode * 59 + Col.GetHashCode();
                if (Row != null)
                    hashCode = hashCode * 59 + Row.GetHashCode();
                if (SizeX != null)
                    hashCode = hashCode * 59 + SizeX.GetHashCode();
                if (SizeY != null)
                    hashCode = hashCode * 59 + SizeY.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
