/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// ChartAxisConfigBean
    /// </summary>
    [DataContract]
    public partial class ChartAxisConfigBean :  IEquatable<ChartAxisConfigBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartAxisConfigBean" /> class.
        /// </summary>
        /// <param name="axis">axis.</param>
        /// <param name="label">label.</param>
        /// <param name="color">color.</param>
        /// <param name="format">format.</param>
        /// <param name="minimum">minimum.</param>
        /// <param name="maximum">maximum.</param>
        /// <param name="position">position.</param>
        /// <param name="majorColor">majorColor.</param>
        /// <param name="majorWidth">majorWidth.</param>
        /// <param name="majorStyle">majorStyle.</param>
        /// <param name="minorColor">minorColor.</param>
        /// <param name="minorWidth">minorWidth.</param>
        /// <param name="minorStyle">minorStyle.</param>
        public ChartAxisConfigBean(int? axis = default(int?), string label = default(string), string color = default(string), string format = default(string), double? minimum = default(double?), double? maximum = default(double?), string position = default(string), string majorColor = default(string), int? majorWidth = default(int?), string majorStyle = default(string), string minorColor = default(string), int? minorWidth = default(int?), string minorStyle = default(string))
        {
            Axis = axis;
            Label = label;
            Color = color;
            Format = format;
            Minimum = minimum;
            Maximum = maximum;
            Position = position;
            MajorColor = majorColor;
            MajorWidth = majorWidth;
            MajorStyle = majorStyle;
            MinorColor = minorColor;
            MinorWidth = minorWidth;
            MinorStyle = minorStyle;
        }
        
        /// <summary>
        /// Gets or Sets Axis
        /// </summary>
        [DataMember(Name="axis", EmitDefaultValue=false)]
        public int? Axis { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets Minimum
        /// </summary>
        [DataMember(Name="minimum", EmitDefaultValue=false)]
        public double? Minimum { get; set; }

        /// <summary>
        /// Gets or Sets Maximum
        /// </summary>
        [DataMember(Name="maximum", EmitDefaultValue=false)]
        public double? Maximum { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets MajorColor
        /// </summary>
        [DataMember(Name="majorColor", EmitDefaultValue=false)]
        public string MajorColor { get; set; }

        /// <summary>
        /// Gets or Sets MajorWidth
        /// </summary>
        [DataMember(Name="majorWidth", EmitDefaultValue=false)]
        public int? MajorWidth { get; set; }

        /// <summary>
        /// Gets or Sets MajorStyle
        /// </summary>
        [DataMember(Name="majorStyle", EmitDefaultValue=false)]
        public string MajorStyle { get; set; }

        /// <summary>
        /// Gets or Sets MinorColor
        /// </summary>
        [DataMember(Name="minorColor", EmitDefaultValue=false)]
        public string MinorColor { get; set; }

        /// <summary>
        /// Gets or Sets MinorWidth
        /// </summary>
        [DataMember(Name="minorWidth", EmitDefaultValue=false)]
        public int? MinorWidth { get; set; }

        /// <summary>
        /// Gets or Sets MinorStyle
        /// </summary>
        [DataMember(Name="minorStyle", EmitDefaultValue=false)]
        public string MinorStyle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChartAxisConfigBean {\n");
            sb.Append("  Axis: ").Append(Axis).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  MajorColor: ").Append(MajorColor).Append("\n");
            sb.Append("  MajorWidth: ").Append(MajorWidth).Append("\n");
            sb.Append("  MajorStyle: ").Append(MajorStyle).Append("\n");
            sb.Append("  MinorColor: ").Append(MinorColor).Append("\n");
            sb.Append("  MinorWidth: ").Append(MinorWidth).Append("\n");
            sb.Append("  MinorStyle: ").Append(MinorStyle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ChartAxisConfigBean);
        }

        /// <summary>
        /// Returns true if ChartAxisConfigBean instances are equal
        /// </summary>
        /// <param name="input">Instance of ChartAxisConfigBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChartAxisConfigBean input)
        {
            if (input == null)
                return false;

            return 
                (
                    Axis == input.Axis ||
                    (Axis != null &&
                    Axis.Equals(input.Axis))
                ) && 
                (
                    Label == input.Label ||
                    (Label != null &&
                    Label.Equals(input.Label))
                ) && 
                (
                    Color == input.Color ||
                    (Color != null &&
                    Color.Equals(input.Color))
                ) && 
                (
                    Format == input.Format ||
                    (Format != null &&
                    Format.Equals(input.Format))
                ) && 
                (
                    Minimum == input.Minimum ||
                    (Minimum != null &&
                    Minimum.Equals(input.Minimum))
                ) && 
                (
                    Maximum == input.Maximum ||
                    (Maximum != null &&
                    Maximum.Equals(input.Maximum))
                ) && 
                (
                    Position == input.Position ||
                    (Position != null &&
                    Position.Equals(input.Position))
                ) && 
                (
                    MajorColor == input.MajorColor ||
                    (MajorColor != null &&
                    MajorColor.Equals(input.MajorColor))
                ) && 
                (
                    MajorWidth == input.MajorWidth ||
                    (MajorWidth != null &&
                    MajorWidth.Equals(input.MajorWidth))
                ) && 
                (
                    MajorStyle == input.MajorStyle ||
                    (MajorStyle != null &&
                    MajorStyle.Equals(input.MajorStyle))
                ) && 
                (
                    MinorColor == input.MinorColor ||
                    (MinorColor != null &&
                    MinorColor.Equals(input.MinorColor))
                ) && 
                (
                    MinorWidth == input.MinorWidth ||
                    (MinorWidth != null &&
                    MinorWidth.Equals(input.MinorWidth))
                ) && 
                (
                    MinorStyle == input.MinorStyle ||
                    (MinorStyle != null &&
                    MinorStyle.Equals(input.MinorStyle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Axis != null)
                    hashCode = hashCode * 59 + Axis.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                if (Minimum != null)
                    hashCode = hashCode * 59 + Minimum.GetHashCode();
                if (Maximum != null)
                    hashCode = hashCode * 59 + Maximum.GetHashCode();
                if (Position != null)
                    hashCode = hashCode * 59 + Position.GetHashCode();
                if (MajorColor != null)
                    hashCode = hashCode * 59 + MajorColor.GetHashCode();
                if (MajorWidth != null)
                    hashCode = hashCode * 59 + MajorWidth.GetHashCode();
                if (MajorStyle != null)
                    hashCode = hashCode * 59 + MajorStyle.GetHashCode();
                if (MinorColor != null)
                    hashCode = hashCode * 59 + MinorColor.GetHashCode();
                if (MinorWidth != null)
                    hashCode = hashCode * 59 + MinorWidth.GetHashCode();
                if (MinorStyle != null)
                    hashCode = hashCode * 59 + MinorStyle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
