/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// ItemHistoryDTO
    /// </summary>
    [DataContract]
    public partial class ItemHistoryDTO :  IEquatable<ItemHistoryDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemHistoryDTO" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="totalrecords">totalrecords.</param>
        /// <param name="datapoints">datapoints.</param>
        /// <param name="data">data.</param>
        public ItemHistoryDTO(string name = default(string), string totalrecords = default(string), string datapoints = default(string), List<HistoryDataBean> data = default(List<HistoryDataBean>))
        {
            Name = name;
            Totalrecords = totalrecords;
            Datapoints = datapoints;
            Data = data;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Totalrecords
        /// </summary>
        [DataMember(Name="totalrecords", EmitDefaultValue=false)]
        public string Totalrecords { get; set; }

        /// <summary>
        /// Gets or Sets Datapoints
        /// </summary>
        [DataMember(Name="datapoints", EmitDefaultValue=false)]
        public string Datapoints { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<HistoryDataBean> Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemHistoryDTO {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Totalrecords: ").Append(Totalrecords).Append("\n");
            sb.Append("  Datapoints: ").Append(Datapoints).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ItemHistoryDTO);
        }

        /// <summary>
        /// Returns true if ItemHistoryDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemHistoryDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemHistoryDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Totalrecords == input.Totalrecords ||
                    (Totalrecords != null &&
                    Totalrecords.Equals(input.Totalrecords))
                ) && 
                (
                    Datapoints == input.Datapoints ||
                    (Datapoints != null &&
                    Datapoints.Equals(input.Datapoints))
                ) && 
                (
                    Data == input.Data ||
                    Data != null &&
                    Data.SequenceEqual(input.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Totalrecords != null)
                    hashCode = hashCode * 59 + Totalrecords.GetHashCode();
                if (Datapoints != null)
                    hashCode = hashCode * 59 + Datapoints.GetHashCode();
                if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
