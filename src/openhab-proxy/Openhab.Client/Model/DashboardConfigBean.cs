/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// DashboardConfigBean
    /// </summary>
    [DataContract]
    public partial class DashboardConfigBean :  IEquatable<DashboardConfigBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardConfigBean" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="category">category.</param>
        /// <param name="menu">menu (default to false).</param>
        /// <param name="menuOrder">menuOrder.</param>
        /// <param name="widgets">widgets.</param>
        public DashboardConfigBean(int? id = default(int?), string name = default(string), string category = default(string), bool? menu = false, int? menuOrder = default(int?), List<DashboardWidgetBean> widgets = default(List<DashboardWidgetBean>))
        {
            Id = id;
            Name = name;
            Category = category;
            // use default value if no "menu" provided
            if (menu == null)
            {
                Menu = false;
            }
            else
            {
                Menu = menu;
            }
            MenuOrder = menuOrder;
            Widgets = widgets;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Menu
        /// </summary>
        [DataMember(Name="menu", EmitDefaultValue=false)]
        public bool? Menu { get; set; }

        /// <summary>
        /// Gets or Sets MenuOrder
        /// </summary>
        [DataMember(Name="menuOrder", EmitDefaultValue=false)]
        public int? MenuOrder { get; set; }

        /// <summary>
        /// Gets or Sets Widgets
        /// </summary>
        [DataMember(Name="widgets", EmitDefaultValue=false)]
        public List<DashboardWidgetBean> Widgets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DashboardConfigBean {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Menu: ").Append(Menu).Append("\n");
            sb.Append("  MenuOrder: ").Append(MenuOrder).Append("\n");
            sb.Append("  Widgets: ").Append(Widgets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DashboardConfigBean);
        }

        /// <summary>
        /// Returns true if DashboardConfigBean instances are equal
        /// </summary>
        /// <param name="input">Instance of DashboardConfigBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardConfigBean input)
        {
            if (input == null)
                return false;

            return 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Category == input.Category ||
                    (Category != null &&
                    Category.Equals(input.Category))
                ) && 
                (
                    Menu == input.Menu ||
                    (Menu != null &&
                    Menu.Equals(input.Menu))
                ) && 
                (
                    MenuOrder == input.MenuOrder ||
                    (MenuOrder != null &&
                    MenuOrder.Equals(input.MenuOrder))
                ) && 
                (
                    Widgets == input.Widgets ||
                    Widgets != null &&
                    Widgets.SequenceEqual(input.Widgets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (Menu != null)
                    hashCode = hashCode * 59 + Menu.GetHashCode();
                if (MenuOrder != null)
                    hashCode = hashCode * 59 + MenuOrder.GetHashCode();
                if (Widgets != null)
                    hashCode = hashCode * 59 + Widgets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
