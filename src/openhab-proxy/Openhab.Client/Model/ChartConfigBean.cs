/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// ChartConfigBean
    /// </summary>
    [DataContract]
    public partial class ChartConfigBean :  IEquatable<ChartConfigBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartConfigBean" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="title">title.</param>
        /// <param name="icon">icon.</param>
        /// <param name="period">period.</param>
        /// <param name="legend">legend (default to false).</param>
        /// <param name="items">items.</param>
        /// <param name="axis">axis.</param>
        public ChartConfigBean(int? id = default(int?), string name = default(string), string title = default(string), string icon = default(string), int? period = default(int?), bool? legend = false, List<ChartItemConfigBean> items = default(List<ChartItemConfigBean>), List<ChartAxisConfigBean> axis = default(List<ChartAxisConfigBean>))
        {
            Id = id;
            Name = name;
            Title = title;
            Icon = icon;
            Period = period;
            // use default value if no "legend" provided
            if (legend == null)
            {
                Legend = false;
            }
            else
            {
                Legend = legend;
            }
            Items = items;
            Axis = axis;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public int? Period { get; set; }

        /// <summary>
        /// Gets or Sets Legend
        /// </summary>
        [DataMember(Name="legend", EmitDefaultValue=false)]
        public bool? Legend { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<ChartItemConfigBean> Items { get; set; }

        /// <summary>
        /// Gets or Sets Axis
        /// </summary>
        [DataMember(Name="axis", EmitDefaultValue=false)]
        public List<ChartAxisConfigBean> Axis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChartConfigBean {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Legend: ").Append(Legend).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Axis: ").Append(Axis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ChartConfigBean);
        }

        /// <summary>
        /// Returns true if ChartConfigBean instances are equal
        /// </summary>
        /// <param name="input">Instance of ChartConfigBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChartConfigBean input)
        {
            if (input == null)
                return false;

            return 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Title == input.Title ||
                    (Title != null &&
                    Title.Equals(input.Title))
                ) && 
                (
                    Icon == input.Icon ||
                    (Icon != null &&
                    Icon.Equals(input.Icon))
                ) && 
                (
                    Period == input.Period ||
                    (Period != null &&
                    Period.Equals(input.Period))
                ) && 
                (
                    Legend == input.Legend ||
                    (Legend != null &&
                    Legend.Equals(input.Legend))
                ) && 
                (
                    Items == input.Items ||
                    Items != null &&
                    Items.SequenceEqual(input.Items)
                ) && 
                (
                    Axis == input.Axis ||
                    Axis != null &&
                    Axis.SequenceEqual(input.Axis)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                if (Icon != null)
                    hashCode = hashCode * 59 + Icon.GetHashCode();
                if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                if (Legend != null)
                    hashCode = hashCode * 59 + Legend.GetHashCode();
                if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                if (Axis != null)
                    hashCode = hashCode * 59 + Axis.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
