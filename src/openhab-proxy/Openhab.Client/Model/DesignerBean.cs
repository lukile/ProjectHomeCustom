/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// DesignerBean
    /// </summary>
    [DataContract]
    public partial class DesignerBean :  IEquatable<DesignerBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DesignerBean" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="filename">filename.</param>
        /// <param name="id">id.</param>
        /// <param name="block">block.</param>
        /// <param name="source">source.</param>
        /// <param name="sourceEdited">sourceEdited (default to false).</param>
        public DesignerBean(string name = default(string), string filename = default(string), int? id = default(int?), DesignerBlockBean block = default(DesignerBlockBean), string source = default(string), bool? sourceEdited = false)
        {
            Name = name;
            Filename = filename;
            Id = id;
            Block = block;
            Source = source;
            // use default value if no "sourceEdited" provided
            if (sourceEdited == null)
            {
                SourceEdited = false;
            }
            else
            {
                SourceEdited = sourceEdited;
            }
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name="block", EmitDefaultValue=false)]
        public DesignerBlockBean Block { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets SourceEdited
        /// </summary>
        [DataMember(Name="sourceEdited", EmitDefaultValue=false)]
        public bool? SourceEdited { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesignerBean {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SourceEdited: ").Append(SourceEdited).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DesignerBean);
        }

        /// <summary>
        /// Returns true if DesignerBean instances are equal
        /// </summary>
        /// <param name="input">Instance of DesignerBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesignerBean input)
        {
            if (input == null)
                return false;

            return 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Filename == input.Filename ||
                    (Filename != null &&
                    Filename.Equals(input.Filename))
                ) && 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) && 
                (
                    Block == input.Block ||
                    (Block != null &&
                    Block.Equals(input.Block))
                ) && 
                (
                    Source == input.Source ||
                    (Source != null &&
                    Source.Equals(input.Source))
                ) && 
                (
                    SourceEdited == input.SourceEdited ||
                    (SourceEdited != null &&
                    SourceEdited.Equals(input.SourceEdited))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Filename != null)
                    hashCode = hashCode * 59 + Filename.GetHashCode();
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Block != null)
                    hashCode = hashCode * 59 + Block.GetHashCode();
                if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                if (SourceEdited != null)
                    hashCode = hashCode * 59 + SourceEdited.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
