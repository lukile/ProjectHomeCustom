/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// DesignerBlockBean
    /// </summary>
    [DataContract]
    public partial class DesignerBlockBean :  IEquatable<DesignerBlockBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DesignerBlockBean" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="inline">inline (default to false).</param>
        /// <param name="moveable">moveable (default to false).</param>
        /// <param name="disabled">disabled (default to false).</param>
        /// <param name="deletable">deletable (default to false).</param>
        /// <param name="editable">editable (default to false).</param>
        /// <param name="comment">comment.</param>
        /// <param name="mutation">mutation.</param>
        /// <param name="children">children.</param>
        /// <param name="fields">fields.</param>
        /// <param name="next">next.</param>
        public DesignerBlockBean(string type = default(string), bool? inline = false, bool? moveable = false, bool? disabled = false, bool? deletable = false, bool? editable = false, DesignerCommentBean comment = default(DesignerCommentBean), List<DesignerMutationBean> mutation = default(List<DesignerMutationBean>), List<DesignerChildBean> children = default(List<DesignerChildBean>), List<DesignerFieldBean> fields = default(List<DesignerFieldBean>), DesignerBlockBean next = default(DesignerBlockBean))
        {
            Type = type;
            // use default value if no "inline" provided
            if (inline == null)
            {
                Inline = false;
            }
            else
            {
                Inline = inline;
            }
            // use default value if no "moveable" provided
            if (moveable == null)
            {
                Moveable = false;
            }
            else
            {
                Moveable = moveable;
            }
            // use default value if no "disabled" provided
            if (disabled == null)
            {
                Disabled = false;
            }
            else
            {
                Disabled = disabled;
            }
            // use default value if no "deletable" provided
            if (deletable == null)
            {
                Deletable = false;
            }
            else
            {
                Deletable = deletable;
            }
            // use default value if no "editable" provided
            if (editable == null)
            {
                Editable = false;
            }
            else
            {
                Editable = editable;
            }
            Comment = comment;
            Mutation = mutation;
            Children = children;
            Fields = fields;
            Next = next;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Inline
        /// </summary>
        [DataMember(Name="inline", EmitDefaultValue=false)]
        public bool? Inline { get; set; }

        /// <summary>
        /// Gets or Sets Moveable
        /// </summary>
        [DataMember(Name="moveable", EmitDefaultValue=false)]
        public bool? Moveable { get; set; }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Gets or Sets Deletable
        /// </summary>
        [DataMember(Name="deletable", EmitDefaultValue=false)]
        public bool? Deletable { get; set; }

        /// <summary>
        /// Gets or Sets Editable
        /// </summary>
        [DataMember(Name="editable", EmitDefaultValue=false)]
        public bool? Editable { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public DesignerCommentBean Comment { get; set; }

        /// <summary>
        /// Gets or Sets Mutation
        /// </summary>
        [DataMember(Name="mutation", EmitDefaultValue=false)]
        public List<DesignerMutationBean> Mutation { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<DesignerChildBean> Children { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<DesignerFieldBean> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name="next", EmitDefaultValue=false)]
        public DesignerBlockBean Next { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesignerBlockBean {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Inline: ").Append(Inline).Append("\n");
            sb.Append("  Moveable: ").Append(Moveable).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Deletable: ").Append(Deletable).Append("\n");
            sb.Append("  Editable: ").Append(Editable).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Mutation: ").Append(Mutation).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DesignerBlockBean);
        }

        /// <summary>
        /// Returns true if DesignerBlockBean instances are equal
        /// </summary>
        /// <param name="input">Instance of DesignerBlockBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesignerBlockBean input)
        {
            if (input == null)
                return false;

            return 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    Inline == input.Inline ||
                    (Inline != null &&
                    Inline.Equals(input.Inline))
                ) && 
                (
                    Moveable == input.Moveable ||
                    (Moveable != null &&
                    Moveable.Equals(input.Moveable))
                ) && 
                (
                    Disabled == input.Disabled ||
                    (Disabled != null &&
                    Disabled.Equals(input.Disabled))
                ) && 
                (
                    Deletable == input.Deletable ||
                    (Deletable != null &&
                    Deletable.Equals(input.Deletable))
                ) && 
                (
                    Editable == input.Editable ||
                    (Editable != null &&
                    Editable.Equals(input.Editable))
                ) && 
                (
                    Comment == input.Comment ||
                    (Comment != null &&
                    Comment.Equals(input.Comment))
                ) && 
                (
                    Mutation == input.Mutation ||
                    Mutation != null &&
                    Mutation.SequenceEqual(input.Mutation)
                ) && 
                (
                    Children == input.Children ||
                    Children != null &&
                    Children.SequenceEqual(input.Children)
                ) && 
                (
                    Fields == input.Fields ||
                    Fields != null &&
                    Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    Next == input.Next ||
                    (Next != null &&
                    Next.Equals(input.Next))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Inline != null)
                    hashCode = hashCode * 59 + Inline.GetHashCode();
                if (Moveable != null)
                    hashCode = hashCode * 59 + Moveable.GetHashCode();
                if (Disabled != null)
                    hashCode = hashCode * 59 + Disabled.GetHashCode();
                if (Deletable != null)
                    hashCode = hashCode * 59 + Deletable.GetHashCode();
                if (Editable != null)
                    hashCode = hashCode * 59 + Editable.GetHashCode();
                if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                if (Mutation != null)
                    hashCode = hashCode * 59 + Mutation.GetHashCode();
                if (Children != null)
                    hashCode = hashCode * 59 + Children.GetHashCode();
                if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                if (Next != null)
                    hashCode = hashCode * 59 + Next.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
