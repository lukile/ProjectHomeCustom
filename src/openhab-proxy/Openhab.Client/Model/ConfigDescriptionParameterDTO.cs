/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Openhab.Client.Model
{
    /// <summary>
    /// ConfigDescriptionParameterDTO
    /// </summary>
    [DataContract]
    public partial class ConfigDescriptionParameterDTO :  IEquatable<ConfigDescriptionParameterDTO>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 1,
            
            /// <summary>
            /// Enum INTEGER for value: INTEGER
            /// </summary>
            [EnumMember(Value = "INTEGER")]
            INTEGER = 2,
            
            /// <summary>
            /// Enum DECIMAL for value: DECIMAL
            /// </summary>
            [EnumMember(Value = "DECIMAL")]
            DECIMAL = 3,
            
            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 4
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigDescriptionParameterDTO" /> class.
        /// </summary>
        /// <param name="context">context.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="description">description.</param>
        /// <param name="label">label.</param>
        /// <param name="name">name.</param>
        /// <param name="required">required (default to false).</param>
        /// <param name="type">type.</param>
        /// <param name="min">min.</param>
        /// <param name="max">max.</param>
        /// <param name="stepsize">stepsize.</param>
        /// <param name="pattern">pattern.</param>
        /// <param name="readOnly">readOnly (default to false).</param>
        /// <param name="multiple">multiple (default to false).</param>
        /// <param name="multipleLimit">multipleLimit.</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="advanced">advanced (default to false).</param>
        /// <param name="verify">verify (default to false).</param>
        /// <param name="limitToOptions">limitToOptions (default to false).</param>
        /// <param name="unit">unit.</param>
        /// <param name="unitLabel">unitLabel.</param>
        /// <param name="options">options.</param>
        /// <param name="filterCriteria">filterCriteria.</param>
        public ConfigDescriptionParameterDTO(string context = default(string), string defaultValue = default(string), string description = default(string), string label = default(string), string name = default(string), bool? required = false, TypeEnum? type = default(TypeEnum?), decimal? min = default(decimal?), decimal? max = default(decimal?), decimal? stepsize = default(decimal?), string pattern = default(string), bool? readOnly = false, bool? multiple = false, int? multipleLimit = default(int?), string groupName = default(string), bool? advanced = false, bool? verify = false, bool? limitToOptions = false, string unit = default(string), string unitLabel = default(string), List<ParameterOptionDTO> options = default(List<ParameterOptionDTO>), List<FilterCriteriaDTO> filterCriteria = default(List<FilterCriteriaDTO>))
        {
            Context = context;
            DefaultValue = defaultValue;
            Description = description;
            Label = label;
            Name = name;
            // use default value if no "required" provided
            if (required == null)
            {
                Required = false;
            }
            else
            {
                Required = required;
            }
            Type = type;
            Min = min;
            Max = max;
            Stepsize = stepsize;
            Pattern = pattern;
            // use default value if no "readOnly" provided
            if (readOnly == null)
            {
                ReadOnly = false;
            }
            else
            {
                ReadOnly = readOnly;
            }
            // use default value if no "multiple" provided
            if (multiple == null)
            {
                Multiple = false;
            }
            else
            {
                Multiple = multiple;
            }
            MultipleLimit = multipleLimit;
            GroupName = groupName;
            // use default value if no "advanced" provided
            if (advanced == null)
            {
                Advanced = false;
            }
            else
            {
                Advanced = advanced;
            }
            // use default value if no "verify" provided
            if (verify == null)
            {
                Verify = false;
            }
            else
            {
                Verify = verify;
            }
            // use default value if no "limitToOptions" provided
            if (limitToOptions == null)
            {
                LimitToOptions = false;
            }
            else
            {
                LimitToOptions = limitToOptions;
            }
            Unit = unit;
            UnitLabel = unitLabel;
            Options = options;
            FilterCriteria = filterCriteria;
        }
        
        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public string Context { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }


        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public decimal? Min { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public decimal? Max { get; set; }

        /// <summary>
        /// Gets or Sets Stepsize
        /// </summary>
        [DataMember(Name="stepsize", EmitDefaultValue=false)]
        public decimal? Stepsize { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [DataMember(Name="pattern", EmitDefaultValue=false)]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Multiple
        /// </summary>
        [DataMember(Name="multiple", EmitDefaultValue=false)]
        public bool? Multiple { get; set; }

        /// <summary>
        /// Gets or Sets MultipleLimit
        /// </summary>
        [DataMember(Name="multipleLimit", EmitDefaultValue=false)]
        public int? MultipleLimit { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name="groupName", EmitDefaultValue=false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets Advanced
        /// </summary>
        [DataMember(Name="advanced", EmitDefaultValue=false)]
        public bool? Advanced { get; set; }

        /// <summary>
        /// Gets or Sets Verify
        /// </summary>
        [DataMember(Name="verify", EmitDefaultValue=false)]
        public bool? Verify { get; set; }

        /// <summary>
        /// Gets or Sets LimitToOptions
        /// </summary>
        [DataMember(Name="limitToOptions", EmitDefaultValue=false)]
        public bool? LimitToOptions { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets UnitLabel
        /// </summary>
        [DataMember(Name="unitLabel", EmitDefaultValue=false)]
        public string UnitLabel { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<ParameterOptionDTO> Options { get; set; }

        /// <summary>
        /// Gets or Sets FilterCriteria
        /// </summary>
        [DataMember(Name="filterCriteria", EmitDefaultValue=false)]
        public List<FilterCriteriaDTO> FilterCriteria { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigDescriptionParameterDTO {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Stepsize: ").Append(Stepsize).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Multiple: ").Append(Multiple).Append("\n");
            sb.Append("  MultipleLimit: ").Append(MultipleLimit).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Advanced: ").Append(Advanced).Append("\n");
            sb.Append("  Verify: ").Append(Verify).Append("\n");
            sb.Append("  LimitToOptions: ").Append(LimitToOptions).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  UnitLabel: ").Append(UnitLabel).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  FilterCriteria: ").Append(FilterCriteria).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ConfigDescriptionParameterDTO);
        }

        /// <summary>
        /// Returns true if ConfigDescriptionParameterDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigDescriptionParameterDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigDescriptionParameterDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    Context == input.Context ||
                    (Context != null &&
                    Context.Equals(input.Context))
                ) && 
                (
                    DefaultValue == input.DefaultValue ||
                    (DefaultValue != null &&
                    DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    Description == input.Description ||
                    (Description != null &&
                    Description.Equals(input.Description))
                ) && 
                (
                    Label == input.Label ||
                    (Label != null &&
                    Label.Equals(input.Label))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Required == input.Required ||
                    (Required != null &&
                    Required.Equals(input.Required))
                ) && 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    Min == input.Min ||
                    (Min != null &&
                    Min.Equals(input.Min))
                ) && 
                (
                    Max == input.Max ||
                    (Max != null &&
                    Max.Equals(input.Max))
                ) && 
                (
                    Stepsize == input.Stepsize ||
                    (Stepsize != null &&
                    Stepsize.Equals(input.Stepsize))
                ) && 
                (
                    Pattern == input.Pattern ||
                    (Pattern != null &&
                    Pattern.Equals(input.Pattern))
                ) && 
                (
                    ReadOnly == input.ReadOnly ||
                    (ReadOnly != null &&
                    ReadOnly.Equals(input.ReadOnly))
                ) && 
                (
                    Multiple == input.Multiple ||
                    (Multiple != null &&
                    Multiple.Equals(input.Multiple))
                ) && 
                (
                    MultipleLimit == input.MultipleLimit ||
                    (MultipleLimit != null &&
                    MultipleLimit.Equals(input.MultipleLimit))
                ) && 
                (
                    GroupName == input.GroupName ||
                    (GroupName != null &&
                    GroupName.Equals(input.GroupName))
                ) && 
                (
                    Advanced == input.Advanced ||
                    (Advanced != null &&
                    Advanced.Equals(input.Advanced))
                ) && 
                (
                    Verify == input.Verify ||
                    (Verify != null &&
                    Verify.Equals(input.Verify))
                ) && 
                (
                    LimitToOptions == input.LimitToOptions ||
                    (LimitToOptions != null &&
                    LimitToOptions.Equals(input.LimitToOptions))
                ) && 
                (
                    Unit == input.Unit ||
                    (Unit != null &&
                    Unit.Equals(input.Unit))
                ) && 
                (
                    UnitLabel == input.UnitLabel ||
                    (UnitLabel != null &&
                    UnitLabel.Equals(input.UnitLabel))
                ) && 
                (
                    Options == input.Options ||
                    Options != null &&
                    Options.SequenceEqual(input.Options)
                ) && 
                (
                    FilterCriteria == input.FilterCriteria ||
                    FilterCriteria != null &&
                    FilterCriteria.SequenceEqual(input.FilterCriteria)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                if (DefaultValue != null)
                    hashCode = hashCode * 59 + DefaultValue.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Required != null)
                    hashCode = hashCode * 59 + Required.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Min != null)
                    hashCode = hashCode * 59 + Min.GetHashCode();
                if (Max != null)
                    hashCode = hashCode * 59 + Max.GetHashCode();
                if (Stepsize != null)
                    hashCode = hashCode * 59 + Stepsize.GetHashCode();
                if (Pattern != null)
                    hashCode = hashCode * 59 + Pattern.GetHashCode();
                if (ReadOnly != null)
                    hashCode = hashCode * 59 + ReadOnly.GetHashCode();
                if (Multiple != null)
                    hashCode = hashCode * 59 + Multiple.GetHashCode();
                if (MultipleLimit != null)
                    hashCode = hashCode * 59 + MultipleLimit.GetHashCode();
                if (GroupName != null)
                    hashCode = hashCode * 59 + GroupName.GetHashCode();
                if (Advanced != null)
                    hashCode = hashCode * 59 + Advanced.GetHashCode();
                if (Verify != null)
                    hashCode = hashCode * 59 + Verify.GetHashCode();
                if (LimitToOptions != null)
                    hashCode = hashCode * 59 + LimitToOptions.GetHashCode();
                if (Unit != null)
                    hashCode = hashCode * 59 + Unit.GetHashCode();
                if (UnitLabel != null)
                    hashCode = hashCode * 59 + UnitLabel.GetHashCode();
                if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                if (FilterCriteria != null)
                    hashCode = hashCode * 59 + FilterCriteria.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
