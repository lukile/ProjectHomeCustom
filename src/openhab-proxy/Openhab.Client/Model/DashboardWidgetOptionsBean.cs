/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// DashboardWidgetOptionsBean
    /// </summary>
    [DataContract]
    public partial class DashboardWidgetOptionsBean :  IEquatable<DashboardWidgetOptionsBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardWidgetOptionsBean" /> class.
        /// </summary>
        /// <param name="uri">uri.</param>
        /// <param name="chartId">chartId.</param>
        /// <param name="serviceId">serviceId.</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="barWidth">barWidth.</param>
        /// <param name="borderWidth">borderWidth.</param>
        /// <param name="angle">angle.</param>
        /// <param name="rotate">rotate.</param>
        /// <param name="barAngle">barAngle.</param>
        /// <param name="lineCap">lineCap.</param>
        /// <param name="scaleMin">scaleMin.</param>
        /// <param name="scaleMax">scaleMax.</param>
        /// <param name="title">title.</param>
        /// <param name="units">units.</param>
        /// <param name="group">group.</param>
        /// <param name="floorplanId">floorplanId.</param>
        public DashboardWidgetOptionsBean(string uri = default(string), string chartId = default(string), string serviceId = default(string), string itemId = default(string), int? barWidth = default(int?), int? borderWidth = default(int?), int? angle = default(int?), int? rotate = default(int?), int? barAngle = default(int?), string lineCap = default(string), int? scaleMin = default(int?), int? scaleMax = default(int?), string title = default(string), string units = default(string), string group = default(string), string floorplanId = default(string))
        {
            Uri = uri;
            ChartId = chartId;
            ServiceId = serviceId;
            ItemId = itemId;
            BarWidth = barWidth;
            BorderWidth = borderWidth;
            Angle = angle;
            Rotate = rotate;
            BarAngle = barAngle;
            LineCap = lineCap;
            ScaleMin = scaleMin;
            ScaleMax = scaleMax;
            Title = title;
            Units = units;
            Group = group;
            FloorplanId = floorplanId;
        }
        
        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets ChartId
        /// </summary>
        [DataMember(Name="chartId", EmitDefaultValue=false)]
        public string ChartId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name="serviceId", EmitDefaultValue=false)]
        public string ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets BarWidth
        /// </summary>
        [DataMember(Name="barWidth", EmitDefaultValue=false)]
        public int? BarWidth { get; set; }

        /// <summary>
        /// Gets or Sets BorderWidth
        /// </summary>
        [DataMember(Name="borderWidth", EmitDefaultValue=false)]
        public int? BorderWidth { get; set; }

        /// <summary>
        /// Gets or Sets Angle
        /// </summary>
        [DataMember(Name="angle", EmitDefaultValue=false)]
        public int? Angle { get; set; }

        /// <summary>
        /// Gets or Sets Rotate
        /// </summary>
        [DataMember(Name="rotate", EmitDefaultValue=false)]
        public int? Rotate { get; set; }

        /// <summary>
        /// Gets or Sets BarAngle
        /// </summary>
        [DataMember(Name="barAngle", EmitDefaultValue=false)]
        public int? BarAngle { get; set; }

        /// <summary>
        /// Gets or Sets LineCap
        /// </summary>
        [DataMember(Name="lineCap", EmitDefaultValue=false)]
        public string LineCap { get; set; }

        /// <summary>
        /// Gets or Sets ScaleMin
        /// </summary>
        [DataMember(Name="scaleMin", EmitDefaultValue=false)]
        public int? ScaleMin { get; set; }

        /// <summary>
        /// Gets or Sets ScaleMax
        /// </summary>
        [DataMember(Name="scaleMax", EmitDefaultValue=false)]
        public int? ScaleMax { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public string Units { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets FloorplanId
        /// </summary>
        [DataMember(Name="floorplanId", EmitDefaultValue=false)]
        public string FloorplanId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DashboardWidgetOptionsBean {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  ChartId: ").Append(ChartId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  BarWidth: ").Append(BarWidth).Append("\n");
            sb.Append("  BorderWidth: ").Append(BorderWidth).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Rotate: ").Append(Rotate).Append("\n");
            sb.Append("  BarAngle: ").Append(BarAngle).Append("\n");
            sb.Append("  LineCap: ").Append(LineCap).Append("\n");
            sb.Append("  ScaleMin: ").Append(ScaleMin).Append("\n");
            sb.Append("  ScaleMax: ").Append(ScaleMax).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  FloorplanId: ").Append(FloorplanId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DashboardWidgetOptionsBean);
        }

        /// <summary>
        /// Returns true if DashboardWidgetOptionsBean instances are equal
        /// </summary>
        /// <param name="input">Instance of DashboardWidgetOptionsBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardWidgetOptionsBean input)
        {
            if (input == null)
                return false;

            return 
                (
                    Uri == input.Uri ||
                    (Uri != null &&
                    Uri.Equals(input.Uri))
                ) && 
                (
                    ChartId == input.ChartId ||
                    (ChartId != null &&
                    ChartId.Equals(input.ChartId))
                ) && 
                (
                    ServiceId == input.ServiceId ||
                    (ServiceId != null &&
                    ServiceId.Equals(input.ServiceId))
                ) && 
                (
                    ItemId == input.ItemId ||
                    (ItemId != null &&
                    ItemId.Equals(input.ItemId))
                ) && 
                (
                    BarWidth == input.BarWidth ||
                    (BarWidth != null &&
                    BarWidth.Equals(input.BarWidth))
                ) && 
                (
                    BorderWidth == input.BorderWidth ||
                    (BorderWidth != null &&
                    BorderWidth.Equals(input.BorderWidth))
                ) && 
                (
                    Angle == input.Angle ||
                    (Angle != null &&
                    Angle.Equals(input.Angle))
                ) && 
                (
                    Rotate == input.Rotate ||
                    (Rotate != null &&
                    Rotate.Equals(input.Rotate))
                ) && 
                (
                    BarAngle == input.BarAngle ||
                    (BarAngle != null &&
                    BarAngle.Equals(input.BarAngle))
                ) && 
                (
                    LineCap == input.LineCap ||
                    (LineCap != null &&
                    LineCap.Equals(input.LineCap))
                ) && 
                (
                    ScaleMin == input.ScaleMin ||
                    (ScaleMin != null &&
                    ScaleMin.Equals(input.ScaleMin))
                ) && 
                (
                    ScaleMax == input.ScaleMax ||
                    (ScaleMax != null &&
                    ScaleMax.Equals(input.ScaleMax))
                ) && 
                (
                    Title == input.Title ||
                    (Title != null &&
                    Title.Equals(input.Title))
                ) && 
                (
                    Units == input.Units ||
                    (Units != null &&
                    Units.Equals(input.Units))
                ) && 
                (
                    Group == input.Group ||
                    (Group != null &&
                    Group.Equals(input.Group))
                ) && 
                (
                    FloorplanId == input.FloorplanId ||
                    (FloorplanId != null &&
                    FloorplanId.Equals(input.FloorplanId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Uri != null)
                    hashCode = hashCode * 59 + Uri.GetHashCode();
                if (ChartId != null)
                    hashCode = hashCode * 59 + ChartId.GetHashCode();
                if (ServiceId != null)
                    hashCode = hashCode * 59 + ServiceId.GetHashCode();
                if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                if (BarWidth != null)
                    hashCode = hashCode * 59 + BarWidth.GetHashCode();
                if (BorderWidth != null)
                    hashCode = hashCode * 59 + BorderWidth.GetHashCode();
                if (Angle != null)
                    hashCode = hashCode * 59 + Angle.GetHashCode();
                if (Rotate != null)
                    hashCode = hashCode * 59 + Rotate.GetHashCode();
                if (BarAngle != null)
                    hashCode = hashCode * 59 + BarAngle.GetHashCode();
                if (LineCap != null)
                    hashCode = hashCode * 59 + LineCap.GetHashCode();
                if (ScaleMin != null)
                    hashCode = hashCode * 59 + ScaleMin.GetHashCode();
                if (ScaleMax != null)
                    hashCode = hashCode * 59 + ScaleMax.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                if (Units != null)
                    hashCode = hashCode * 59 + Units.GetHashCode();
                if (Group != null)
                    hashCode = hashCode * 59 + Group.GetHashCode();
                if (FloorplanId != null)
                    hashCode = hashCode * 59 + FloorplanId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
