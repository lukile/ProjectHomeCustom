/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// ProfileTypeDTO
    /// </summary>
    [DataContract]
    public partial class ProfileTypeDTO :  IEquatable<ProfileTypeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileTypeDTO" /> class.
        /// </summary>
        /// <param name="uid">uid.</param>
        /// <param name="label">label.</param>
        /// <param name="kind">kind.</param>
        /// <param name="supportedItemTypes">supportedItemTypes.</param>
        public ProfileTypeDTO(string uid = default(string), string label = default(string), string kind = default(string), List<string> supportedItemTypes = default(List<string>))
        {
            Uid = uid;
            Label = label;
            Kind = kind;
            SupportedItemTypes = supportedItemTypes;
        }
        
        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or Sets SupportedItemTypes
        /// </summary>
        [DataMember(Name="supportedItemTypes", EmitDefaultValue=false)]
        public List<string> SupportedItemTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileTypeDTO {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  SupportedItemTypes: ").Append(SupportedItemTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ProfileTypeDTO);
        }

        /// <summary>
        /// Returns true if ProfileTypeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileTypeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileTypeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    Uid == input.Uid ||
                    (Uid != null &&
                    Uid.Equals(input.Uid))
                ) && 
                (
                    Label == input.Label ||
                    (Label != null &&
                    Label.Equals(input.Label))
                ) && 
                (
                    Kind == input.Kind ||
                    (Kind != null &&
                    Kind.Equals(input.Kind))
                ) && 
                (
                    SupportedItemTypes == input.SupportedItemTypes ||
                    SupportedItemTypes != null &&
                    SupportedItemTypes.SequenceEqual(input.SupportedItemTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Uid != null)
                    hashCode = hashCode * 59 + Uid.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Kind != null)
                    hashCode = hashCode * 59 + Kind.GetHashCode();
                if (SupportedItemTypes != null)
                    hashCode = hashCode * 59 + SupportedItemTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
