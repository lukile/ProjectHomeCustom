/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// BindingInfoDTO
    /// </summary>
    [DataContract]
    public partial class BindingInfoDTO :  IEquatable<BindingInfoDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BindingInfoDTO" /> class.
        /// </summary>
        /// <param name="author">author.</param>
        /// <param name="description">description.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="configDescriptionURI">configDescriptionURI.</param>
        public BindingInfoDTO(string author = default(string), string description = default(string), string id = default(string), string name = default(string), string configDescriptionURI = default(string))
        {
            Author = author;
            Description = description;
            Id = id;
            Name = name;
            ConfigDescriptionURI = configDescriptionURI;
        }
        
        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ConfigDescriptionURI
        /// </summary>
        [DataMember(Name="configDescriptionURI", EmitDefaultValue=false)]
        public string ConfigDescriptionURI { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BindingInfoDTO {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ConfigDescriptionURI: ").Append(ConfigDescriptionURI).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as BindingInfoDTO);
        }

        /// <summary>
        /// Returns true if BindingInfoDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of BindingInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BindingInfoDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    Author == input.Author ||
                    (Author != null &&
                    Author.Equals(input.Author))
                ) && 
                (
                    Description == input.Description ||
                    (Description != null &&
                    Description.Equals(input.Description))
                ) && 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    ConfigDescriptionURI == input.ConfigDescriptionURI ||
                    (ConfigDescriptionURI != null &&
                    ConfigDescriptionURI.Equals(input.ConfigDescriptionURI))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Author != null)
                    hashCode = hashCode * 59 + Author.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (ConfigDescriptionURI != null)
                    hashCode = hashCode * 59 + ConfigDescriptionURI.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
