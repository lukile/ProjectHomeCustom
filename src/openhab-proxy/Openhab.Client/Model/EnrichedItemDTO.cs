/*
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// EnrichedItemDTO
    /// </summary>
    [DataContract]
    public class EnrichedItemDTO : IEquatable<EnrichedItemDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrichedItemDTO" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="name">name.</param>
        /// <param name="label">label.</param>
        /// <param name="category">category.</param>
        /// <param name="tags">tags.</param>
        /// <param name="groupNames">groupNames.</param>
        /// <param name="link">link.</param>
        /// <param name="state">state.</param>
        /// <param name="transformedState">transformedState.</param>
        /// <param name="stateDescription">stateDescription.</param>
        /// <param name="commandDescription">commandDescription.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="editable">editable (default to false).</param>
        public EnrichedItemDTO(string type = default(string), string name = default(string), string label = default(string), string category = default(string), List<string> tags = default(List<string>), List<string> groupNames = default(List<string>), string link = default(string), string state = default(string), string transformedState = default(string), StateDescription stateDescription = default(StateDescription), CommandDescription commandDescription = default(CommandDescription), Dictionary<string, object> metadata = default(Dictionary<string, object>), bool? editable = false)
        {
            Type = type;
            Name = name;
            Label = label;
            Category = category;
            Tags = tags;
            GroupNames = groupNames;
            Link = link;
            State = state;
            TransformedState = transformedState;
            StateDescription = stateDescription;
            CommandDescription = commandDescription;
            Metadata = metadata;
            // use default value if no "editable" provided
            //Editable = editable ?? false;
        }

        /// <summary>
        ///  Gets or Sets Members
        /// </summary>
        [DataMember(Name = "members", EmitDefaultValue = false)]
        public IEnumerable<EnrichedItemDTO> Members { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets GroupNames
        /// </summary>
        [DataMember(Name = "groupNames", EmitDefaultValue = false)]
        public List<string> GroupNames { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets TransformedState
        /// </summary>
        [DataMember(Name = "transformedState", EmitDefaultValue = false)]
        public string TransformedState { get; set; }

        /// <summary>
        /// Gets or Sets StateDescription
        /// </summary>
        [DataMember(Name = "stateDescription", EmitDefaultValue = false)]
        public StateDescription StateDescription { get; set; }

        /// <summary>
        /// Gets or Sets CommandDescription
        /// </summary>
        [DataMember(Name = "commandDescription", EmitDefaultValue = false)]
        public CommandDescription CommandDescription { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, object> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Editable
        /// </summary>
        [DataMember(Name = "editable", EmitDefaultValue = false)]
        public bool? Editable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnrichedItemDTO {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  GroupNames: ").Append(GroupNames).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TransformedState: ").Append(TransformedState).Append("\n");
            sb.Append("  StateDescription: ").Append(StateDescription).Append("\n");
            sb.Append("  CommandDescription: ").Append(CommandDescription).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Editable: ").Append(Editable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EnrichedItemDTO);
        }

        /// <summary>
        /// Returns true if EnrichedItemDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EnrichedItemDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnrichedItemDTO input)
        {
            if (input == null)
                return false;

            return
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) &&
                (
                    Label == input.Label ||
                    (Label != null &&
                    Label.Equals(input.Label))
                ) &&
                (
                    Category == input.Category ||
                    (Category != null &&
                    Category.Equals(input.Category))
                ) &&
                (
                    Tags == input.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(input.Tags)
                ) &&
                (
                    GroupNames == input.GroupNames ||
                    GroupNames != null &&
                    GroupNames.SequenceEqual(input.GroupNames)
                ) &&
                (
                    Link == input.Link ||
                    (Link != null &&
                    Link.Equals(input.Link))
                ) &&
                (
                    State == input.State ||
                    (State != null &&
                    State.Equals(input.State))
                ) &&
                (
                    TransformedState == input.TransformedState ||
                    (TransformedState != null &&
                    TransformedState.Equals(input.TransformedState))
                ) &&
                (
                    StateDescription == input.StateDescription ||
                    (StateDescription != null &&
                    StateDescription.Equals(input.StateDescription))
                ) &&
                (
                    CommandDescription == input.CommandDescription ||
                    (CommandDescription != null &&
                    CommandDescription.Equals(input.CommandDescription))
                ) &&
                (
                    Metadata == input.Metadata ||
                    Metadata != null &&
                    Metadata.SequenceEqual(input.Metadata)
                ) &&
                (
                    Editable == input.Editable ||
                    (Editable != null &&
                    Editable.Equals(input.Editable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                if (GroupNames != null)
                    hashCode = hashCode * 59 + GroupNames.GetHashCode();
                if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                if (TransformedState != null)
                    hashCode = hashCode * 59 + TransformedState.GetHashCode();
                if (StateDescription != null)
                    hashCode = hashCode * 59 + StateDescription.GetHashCode();
                if (CommandDescription != null)
                    hashCode = hashCode * 59 + CommandDescription.GetHashCode();
                if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                if (Editable != null)
                    hashCode = hashCode * 59 + Editable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
