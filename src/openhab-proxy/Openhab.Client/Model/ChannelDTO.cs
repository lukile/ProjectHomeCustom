/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// ChannelDTO
    /// </summary>
    [DataContract]
    public partial class ChannelDTO :  IEquatable<ChannelDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelDTO" /> class.
        /// </summary>
        /// <param name="uid">uid.</param>
        /// <param name="id">id.</param>
        /// <param name="channelTypeUID">channelTypeUID.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="kind">kind.</param>
        /// <param name="label">label.</param>
        /// <param name="description">description.</param>
        /// <param name="defaultTags">defaultTags.</param>
        /// <param name="properties">properties.</param>
        /// <param name="configuration">configuration.</param>
        public ChannelDTO(string uid = default(string), string id = default(string), string channelTypeUID = default(string), string itemType = default(string), string kind = default(string), string label = default(string), string description = default(string), List<string> defaultTags = default(List<string>), Dictionary<string, string> properties = default(Dictionary<string, string>), Dictionary<string, object> configuration = default(Dictionary<string, object>))
        {
            Uid = uid;
            Id = id;
            ChannelTypeUID = channelTypeUID;
            ItemType = itemType;
            Kind = kind;
            Label = label;
            Description = description;
            DefaultTags = defaultTags;
            Properties = properties;
            Configuration = configuration;
        }
        
        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ChannelTypeUID
        /// </summary>
        [DataMember(Name="channelTypeUID", EmitDefaultValue=false)]
        public string ChannelTypeUID { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="itemType", EmitDefaultValue=false)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTags
        /// </summary>
        [DataMember(Name="defaultTags", EmitDefaultValue=false)]
        public List<string> DefaultTags { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public Dictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelDTO {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ChannelTypeUID: ").Append(ChannelTypeUID).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DefaultTags: ").Append(DefaultTags).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ChannelDTO);
        }

        /// <summary>
        /// Returns true if ChannelDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    Uid == input.Uid ||
                    (Uid != null &&
                    Uid.Equals(input.Uid))
                ) && 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) && 
                (
                    ChannelTypeUID == input.ChannelTypeUID ||
                    (ChannelTypeUID != null &&
                    ChannelTypeUID.Equals(input.ChannelTypeUID))
                ) && 
                (
                    ItemType == input.ItemType ||
                    (ItemType != null &&
                    ItemType.Equals(input.ItemType))
                ) && 
                (
                    Kind == input.Kind ||
                    (Kind != null &&
                    Kind.Equals(input.Kind))
                ) && 
                (
                    Label == input.Label ||
                    (Label != null &&
                    Label.Equals(input.Label))
                ) && 
                (
                    Description == input.Description ||
                    (Description != null &&
                    Description.Equals(input.Description))
                ) && 
                (
                    DefaultTags == input.DefaultTags ||
                    DefaultTags != null &&
                    DefaultTags.SequenceEqual(input.DefaultTags)
                ) && 
                (
                    Properties == input.Properties ||
                    Properties != null &&
                    Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    Configuration == input.Configuration ||
                    Configuration != null &&
                    Configuration.SequenceEqual(input.Configuration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Uid != null)
                    hashCode = hashCode * 59 + Uid.GetHashCode();
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (ChannelTypeUID != null)
                    hashCode = hashCode * 59 + ChannelTypeUID.GetHashCode();
                if (ItemType != null)
                    hashCode = hashCode * 59 + ItemType.GetHashCode();
                if (Kind != null)
                    hashCode = hashCode * 59 + Kind.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (DefaultTags != null)
                    hashCode = hashCode * 59 + DefaultTags.GetHashCode();
                if (Properties != null)
                    hashCode = hashCode * 59 + Properties.GetHashCode();
                if (Configuration != null)
                    hashCode = hashCode * 59 + Configuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
