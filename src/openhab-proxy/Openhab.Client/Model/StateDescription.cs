/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// StateDescription
    /// </summary>
    [DataContract]
    public partial class StateDescription :  IEquatable<StateDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StateDescription" /> class.
        /// </summary>
        /// <param name="minimum">minimum.</param>
        /// <param name="maximum">maximum.</param>
        /// <param name="step">step.</param>
        /// <param name="pattern">pattern.</param>
        /// <param name="readOnly">readOnly (default to false).</param>
        /// <param name="options">options.</param>
        public StateDescription(decimal? minimum = default(decimal?), decimal? maximum = default(decimal?), decimal? step = default(decimal?), string pattern = default(string), bool? readOnly = false, List<StateOption> options = default(List<StateOption>))
        {
            Minimum = minimum;
            Maximum = maximum;
            Step = step;
            Pattern = pattern;
            // use default value if no "readOnly" provided
            if (readOnly == null)
            {
                ReadOnly = false;
            }
            else
            {
                ReadOnly = readOnly;
            }
            Options = options;
        }
        
        /// <summary>
        /// Gets or Sets Minimum
        /// </summary>
        [DataMember(Name="minimum", EmitDefaultValue=false)]
        public decimal? Minimum { get; set; }

        /// <summary>
        /// Gets or Sets Maximum
        /// </summary>
        [DataMember(Name="maximum", EmitDefaultValue=false)]
        public decimal? Maximum { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step", EmitDefaultValue=false)]
        public decimal? Step { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [DataMember(Name="pattern", EmitDefaultValue=false)]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<StateOption> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StateDescription {\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as StateDescription);
        }

        /// <summary>
        /// Returns true if StateDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of StateDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StateDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    Minimum == input.Minimum ||
                    (Minimum != null &&
                    Minimum.Equals(input.Minimum))
                ) && 
                (
                    Maximum == input.Maximum ||
                    (Maximum != null &&
                    Maximum.Equals(input.Maximum))
                ) && 
                (
                    Step == input.Step ||
                    (Step != null &&
                    Step.Equals(input.Step))
                ) && 
                (
                    Pattern == input.Pattern ||
                    (Pattern != null &&
                    Pattern.Equals(input.Pattern))
                ) && 
                (
                    ReadOnly == input.ReadOnly ||
                    (ReadOnly != null &&
                    ReadOnly.Equals(input.ReadOnly))
                ) && 
                (
                    Options == input.Options ||
                    Options != null &&
                    Options.SequenceEqual(input.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Minimum != null)
                    hashCode = hashCode * 59 + Minimum.GetHashCode();
                if (Maximum != null)
                    hashCode = hashCode * 59 + Maximum.GetHashCode();
                if (Step != null)
                    hashCode = hashCode * 59 + Step.GetHashCode();
                if (Pattern != null)
                    hashCode = hashCode * 59 + Pattern.GetHashCode();
                if (ReadOnly != null)
                    hashCode = hashCode * 59 + ReadOnly.GetHashCode();
                if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
