/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// GroupItemDTO
    /// </summary>
    [DataContract]
    public partial class GroupItemDTO :  IEquatable<GroupItemDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupItemDTO" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="name">name.</param>
        /// <param name="label">label.</param>
        /// <param name="category">category.</param>
        /// <param name="tags">tags.</param>
        /// <param name="groupNames">groupNames.</param>
        /// <param name="groupType">groupType.</param>
        /// <param name="function">function.</param>
        public GroupItemDTO(string type = default(string), string name = default(string), string label = default(string), string category = default(string), List<string> tags = default(List<string>), List<string> groupNames = default(List<string>), string groupType = default(string), GroupFunctionDTO function = default(GroupFunctionDTO))
        {
            Type = type;
            Name = name;
            Label = label;
            Category = category;
            Tags = tags;
            GroupNames = groupNames;
            GroupType = groupType;
            Function = function;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets GroupNames
        /// </summary>
        [DataMember(Name="groupNames", EmitDefaultValue=false)]
        public List<string> GroupNames { get; set; }

        /// <summary>
        /// Gets or Sets GroupType
        /// </summary>
        [DataMember(Name="groupType", EmitDefaultValue=false)]
        public string GroupType { get; set; }

        /// <summary>
        /// Gets or Sets Function
        /// </summary>
        [DataMember(Name="function", EmitDefaultValue=false)]
        public GroupFunctionDTO Function { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupItemDTO {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  GroupNames: ").Append(GroupNames).Append("\n");
            sb.Append("  GroupType: ").Append(GroupType).Append("\n");
            sb.Append("  Function: ").Append(Function).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as GroupItemDTO);
        }

        /// <summary>
        /// Returns true if GroupItemDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupItemDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupItemDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Label == input.Label ||
                    (Label != null &&
                    Label.Equals(input.Label))
                ) && 
                (
                    Category == input.Category ||
                    (Category != null &&
                    Category.Equals(input.Category))
                ) && 
                (
                    Tags == input.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    GroupNames == input.GroupNames ||
                    GroupNames != null &&
                    GroupNames.SequenceEqual(input.GroupNames)
                ) && 
                (
                    GroupType == input.GroupType ||
                    (GroupType != null &&
                    GroupType.Equals(input.GroupType))
                ) && 
                (
                    Function == input.Function ||
                    (Function != null &&
                    Function.Equals(input.Function))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                if (GroupNames != null)
                    hashCode = hashCode * 59 + GroupNames.GetHashCode();
                if (GroupType != null)
                    hashCode = hashCode * 59 + GroupType.GetHashCode();
                if (Function != null)
                    hashCode = hashCode * 59 + Function.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
