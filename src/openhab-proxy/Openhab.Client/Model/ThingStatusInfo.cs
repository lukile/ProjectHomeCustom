/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Openhab.Client.Model
{
    /// <summary>
    /// ThingStatusInfo
    /// </summary>
    [DataContract]
    public partial class ThingStatusInfo :  IEquatable<ThingStatusInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum UNINITIALIZED for value: UNINITIALIZED
            /// </summary>
            [EnumMember(Value = "UNINITIALIZED")]
            UNINITIALIZED = 1,
            
            /// <summary>
            /// Enum INITIALIZING for value: INITIALIZING
            /// </summary>
            [EnumMember(Value = "INITIALIZING")]
            INITIALIZING = 2,
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 3,
            
            /// <summary>
            /// Enum ONLINE for value: ONLINE
            /// </summary>
            [EnumMember(Value = "ONLINE")]
            ONLINE = 4,
            
            /// <summary>
            /// Enum OFFLINE for value: OFFLINE
            /// </summary>
            [EnumMember(Value = "OFFLINE")]
            OFFLINE = 5,
            
            /// <summary>
            /// Enum REMOVING for value: REMOVING
            /// </summary>
            [EnumMember(Value = "REMOVING")]
            REMOVING = 6,
            
            /// <summary>
            /// Enum REMOVED for value: REMOVED
            /// </summary>
            [EnumMember(Value = "REMOVED")]
            REMOVED = 7
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines StatusDetail
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusDetailEnum
        {
            
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,
            
            /// <summary>
            /// Enum HANDLERMISSINGERROR for value: HANDLER_MISSING_ERROR
            /// </summary>
            [EnumMember(Value = "HANDLER_MISSING_ERROR")]
            HANDLERMISSINGERROR = 2,
            
            /// <summary>
            /// Enum HANDLERREGISTERINGERROR for value: HANDLER_REGISTERING_ERROR
            /// </summary>
            [EnumMember(Value = "HANDLER_REGISTERING_ERROR")]
            HANDLERREGISTERINGERROR = 3,
            
            /// <summary>
            /// Enum HANDLERINITIALIZINGERROR for value: HANDLER_INITIALIZING_ERROR
            /// </summary>
            [EnumMember(Value = "HANDLER_INITIALIZING_ERROR")]
            HANDLERINITIALIZINGERROR = 4,
            
            /// <summary>
            /// Enum HANDLERCONFIGURATIONPENDING for value: HANDLER_CONFIGURATION_PENDING
            /// </summary>
            [EnumMember(Value = "HANDLER_CONFIGURATION_PENDING")]
            HANDLERCONFIGURATIONPENDING = 5,
            
            /// <summary>
            /// Enum CONFIGURATIONPENDING for value: CONFIGURATION_PENDING
            /// </summary>
            [EnumMember(Value = "CONFIGURATION_PENDING")]
            CONFIGURATIONPENDING = 6,
            
            /// <summary>
            /// Enum COMMUNICATIONERROR for value: COMMUNICATION_ERROR
            /// </summary>
            [EnumMember(Value = "COMMUNICATION_ERROR")]
            COMMUNICATIONERROR = 7,
            
            /// <summary>
            /// Enum CONFIGURATIONERROR for value: CONFIGURATION_ERROR
            /// </summary>
            [EnumMember(Value = "CONFIGURATION_ERROR")]
            CONFIGURATIONERROR = 8,
            
            /// <summary>
            /// Enum BRIDGEOFFLINE for value: BRIDGE_OFFLINE
            /// </summary>
            [EnumMember(Value = "BRIDGE_OFFLINE")]
            BRIDGEOFFLINE = 9,
            
            /// <summary>
            /// Enum FIRMWAREUPDATING for value: FIRMWARE_UPDATING
            /// </summary>
            [EnumMember(Value = "FIRMWARE_UPDATING")]
            FIRMWAREUPDATING = 10,
            
            /// <summary>
            /// Enum DUTYCYCLE for value: DUTY_CYCLE
            /// </summary>
            [EnumMember(Value = "DUTY_CYCLE")]
            DUTYCYCLE = 11,
            
            /// <summary>
            /// Enum BRIDGEUNINITIALIZED for value: BRIDGE_UNINITIALIZED
            /// </summary>
            [EnumMember(Value = "BRIDGE_UNINITIALIZED")]
            BRIDGEUNINITIALIZED = 12,
            
            /// <summary>
            /// Enum GONE for value: GONE
            /// </summary>
            [EnumMember(Value = "GONE")]
            GONE = 13,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 14
        }

        /// <summary>
        /// Gets or Sets StatusDetail
        /// </summary>
        [DataMember(Name="statusDetail", EmitDefaultValue=false)]
        public StatusDetailEnum? StatusDetail { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ThingStatusInfo" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="statusDetail">statusDetail.</param>
        /// <param name="description">description.</param>
        public ThingStatusInfo(StatusEnum? status = default(StatusEnum?), StatusDetailEnum? statusDetail = default(StatusDetailEnum?), string description = default(string))
        {
            Status = status;
            StatusDetail = statusDetail;
            Description = description;
        }
        


        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThingStatusInfo {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDetail: ").Append(StatusDetail).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ThingStatusInfo);
        }

        /// <summary>
        /// Returns true if ThingStatusInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ThingStatusInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThingStatusInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    Status == input.Status ||
                    (Status != null &&
                    Status.Equals(input.Status))
                ) && 
                (
                    StatusDetail == input.StatusDetail ||
                    (StatusDetail != null &&
                    StatusDetail.Equals(input.StatusDetail))
                ) && 
                (
                    Description == input.Description ||
                    (Description != null &&
                    Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (StatusDetail != null)
                    hashCode = hashCode * 59 + StatusDetail.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
