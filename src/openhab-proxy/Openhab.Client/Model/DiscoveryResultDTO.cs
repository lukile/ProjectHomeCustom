/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Openhab.Client.Model
{
    /// <summary>
    /// DiscoveryResultDTO
    /// </summary>
    [DataContract]
    public partial class DiscoveryResultDTO :  IEquatable<DiscoveryResultDTO>, IValidatableObject
    {
        /// <summary>
        /// Defines Flag
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlagEnum
        {
            
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 1,
            
            /// <summary>
            /// Enum IGNORED for value: IGNORED
            /// </summary>
            [EnumMember(Value = "IGNORED")]
            IGNORED = 2
        }

        /// <summary>
        /// Gets or Sets Flag
        /// </summary>
        [DataMember(Name="flag", EmitDefaultValue=false)]
        public FlagEnum? Flag { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscoveryResultDTO" /> class.
        /// </summary>
        /// <param name="bridgeUID">bridgeUID.</param>
        /// <param name="flag">flag.</param>
        /// <param name="label">label.</param>
        /// <param name="properties">properties.</param>
        /// <param name="representationProperty">representationProperty.</param>
        /// <param name="thingUID">thingUID.</param>
        /// <param name="thingTypeUID">thingTypeUID.</param>
        public DiscoveryResultDTO(string bridgeUID = default(string), FlagEnum? flag = default(FlagEnum?), string label = default(string), Dictionary<string, object> properties = default(Dictionary<string, object>), string representationProperty = default(string), string thingUID = default(string), string thingTypeUID = default(string))
        {
            BridgeUID = bridgeUID;
            Flag = flag;
            Label = label;
            Properties = properties;
            RepresentationProperty = representationProperty;
            ThingUID = thingUID;
            ThingTypeUID = thingTypeUID;
        }
        
        /// <summary>
        /// Gets or Sets BridgeUID
        /// </summary>
        [DataMember(Name="bridgeUID", EmitDefaultValue=false)]
        public string BridgeUID { get; set; }


        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, object> Properties { get; set; }

        /// <summary>
        /// Gets or Sets RepresentationProperty
        /// </summary>
        [DataMember(Name="representationProperty", EmitDefaultValue=false)]
        public string RepresentationProperty { get; set; }

        /// <summary>
        /// Gets or Sets ThingUID
        /// </summary>
        [DataMember(Name="thingUID", EmitDefaultValue=false)]
        public string ThingUID { get; set; }

        /// <summary>
        /// Gets or Sets ThingTypeUID
        /// </summary>
        [DataMember(Name="thingTypeUID", EmitDefaultValue=false)]
        public string ThingTypeUID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoveryResultDTO {\n");
            sb.Append("  BridgeUID: ").Append(BridgeUID).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  RepresentationProperty: ").Append(RepresentationProperty).Append("\n");
            sb.Append("  ThingUID: ").Append(ThingUID).Append("\n");
            sb.Append("  ThingTypeUID: ").Append(ThingTypeUID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as DiscoveryResultDTO);
        }

        /// <summary>
        /// Returns true if DiscoveryResultDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DiscoveryResultDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoveryResultDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    BridgeUID == input.BridgeUID ||
                    (BridgeUID != null &&
                    BridgeUID.Equals(input.BridgeUID))
                ) && 
                (
                    Flag == input.Flag ||
                    (Flag != null &&
                    Flag.Equals(input.Flag))
                ) && 
                (
                    Label == input.Label ||
                    (Label != null &&
                    Label.Equals(input.Label))
                ) && 
                (
                    Properties == input.Properties ||
                    Properties != null &&
                    Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    RepresentationProperty == input.RepresentationProperty ||
                    (RepresentationProperty != null &&
                    RepresentationProperty.Equals(input.RepresentationProperty))
                ) && 
                (
                    ThingUID == input.ThingUID ||
                    (ThingUID != null &&
                    ThingUID.Equals(input.ThingUID))
                ) && 
                (
                    ThingTypeUID == input.ThingTypeUID ||
                    (ThingTypeUID != null &&
                    ThingTypeUID.Equals(input.ThingTypeUID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (BridgeUID != null)
                    hashCode = hashCode * 59 + BridgeUID.GetHashCode();
                if (Flag != null)
                    hashCode = hashCode * 59 + Flag.GetHashCode();
                if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                if (Properties != null)
                    hashCode = hashCode * 59 + Properties.GetHashCode();
                if (RepresentationProperty != null)
                    hashCode = hashCode * 59 + RepresentationProperty.GetHashCode();
                if (ThingUID != null)
                    hashCode = hashCode * 59 + ThingUID.GetHashCode();
                if (ThingTypeUID != null)
                    hashCode = hashCode * 59 + ThingTypeUID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
