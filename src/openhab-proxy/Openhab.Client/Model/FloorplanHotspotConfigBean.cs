/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// FloorplanHotspotConfigBean
    /// </summary>
    [DataContract]
    public partial class FloorplanHotspotConfigBean :  IEquatable<FloorplanHotspotConfigBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FloorplanHotspotConfigBean" /> class.
        /// </summary>
        /// <param name="posX">posX.</param>
        /// <param name="posY">posY.</param>
        /// <param name="itemId">itemId.</param>
        public FloorplanHotspotConfigBean(double? posX = default(double?), double? posY = default(double?), string itemId = default(string))
        {
            PosX = posX;
            PosY = posY;
            ItemId = itemId;
        }
        
        /// <summary>
        /// Gets or Sets PosX
        /// </summary>
        [DataMember(Name="posX", EmitDefaultValue=false)]
        public double? PosX { get; set; }

        /// <summary>
        /// Gets or Sets PosY
        /// </summary>
        [DataMember(Name="posY", EmitDefaultValue=false)]
        public double? PosY { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FloorplanHotspotConfigBean {\n");
            sb.Append("  PosX: ").Append(PosX).Append("\n");
            sb.Append("  PosY: ").Append(PosY).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FloorplanHotspotConfigBean);
        }

        /// <summary>
        /// Returns true if FloorplanHotspotConfigBean instances are equal
        /// </summary>
        /// <param name="input">Instance of FloorplanHotspotConfigBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FloorplanHotspotConfigBean input)
        {
            if (input == null)
                return false;

            return 
                (
                    PosX == input.PosX ||
                    (PosX != null &&
                    PosX.Equals(input.PosX))
                ) && 
                (
                    PosY == input.PosY ||
                    (PosY != null &&
                    PosY.Equals(input.PosY))
                ) && 
                (
                    ItemId == input.ItemId ||
                    (ItemId != null &&
                    ItemId.Equals(input.ItemId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (PosX != null)
                    hashCode = hashCode * 59 + PosX.GetHashCode();
                if (PosY != null)
                    hashCode = hashCode * 59 + PosY.GetHashCode();
                if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
