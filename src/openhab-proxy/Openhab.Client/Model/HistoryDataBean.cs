/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// HistoryDataBean
    /// </summary>
    [DataContract]
    public partial class HistoryDataBean :  IEquatable<HistoryDataBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryDataBean" /> class.
        /// </summary>
        /// <param name="time">time.</param>
        /// <param name="state">state.</param>
        public HistoryDataBean(long? time = default(long?), string state = default(string))
        {
            Time = time;
            State = state;
        }
        
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public long? Time { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoryDataBean {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as HistoryDataBean);
        }

        /// <summary>
        /// Returns true if HistoryDataBean instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoryDataBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoryDataBean input)
        {
            if (input == null)
                return false;

            return 
                (
                    Time == input.Time ||
                    (Time != null &&
                    Time.Equals(input.Time))
                ) && 
                (
                    State == input.State ||
                    (State != null &&
                    State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
