/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// PageDTO
    /// </summary>
    [DataContract]
    public partial class PageDTO :  IEquatable<PageDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="icon">icon.</param>
        /// <param name="link">link.</param>
        /// <param name="parent">parent.</param>
        /// <param name="leaf">leaf (default to false).</param>
        /// <param name="timeout">timeout (default to false).</param>
        /// <param name="widgets">widgets.</param>
        public PageDTO(string id = default(string), string title = default(string), string icon = default(string), string link = default(string), PageDTO parent = default(PageDTO), bool? leaf = false, bool? timeout = false, List<WidgetDTO> widgets = default(List<WidgetDTO>))
        {
            Id = id;
            Title = title;
            Icon = icon;
            Link = link;
            Parent = parent;
            // use default value if no "leaf" provided
            if (leaf == null)
            {
                Leaf = false;
            }
            else
            {
                Leaf = leaf;
            }
            // use default value if no "timeout" provided
            if (timeout == null)
            {
                Timeout = false;
            }
            else
            {
                Timeout = timeout;
            }
            Widgets = widgets;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public PageDTO Parent { get; set; }

        /// <summary>
        /// Gets or Sets Leaf
        /// </summary>
        [DataMember(Name="leaf", EmitDefaultValue=false)]
        public bool? Leaf { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public bool? Timeout { get; set; }

        /// <summary>
        /// Gets or Sets Widgets
        /// </summary>
        [DataMember(Name="widgets", EmitDefaultValue=false)]
        public List<WidgetDTO> Widgets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PageDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Leaf: ").Append(Leaf).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Widgets: ").Append(Widgets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PageDTO);
        }

        /// <summary>
        /// Returns true if PageDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PageDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) && 
                (
                    Title == input.Title ||
                    (Title != null &&
                    Title.Equals(input.Title))
                ) && 
                (
                    Icon == input.Icon ||
                    (Icon != null &&
                    Icon.Equals(input.Icon))
                ) && 
                (
                    Link == input.Link ||
                    (Link != null &&
                    Link.Equals(input.Link))
                ) && 
                (
                    Parent == input.Parent ||
                    (Parent != null &&
                    Parent.Equals(input.Parent))
                ) && 
                (
                    Leaf == input.Leaf ||
                    (Leaf != null &&
                    Leaf.Equals(input.Leaf))
                ) && 
                (
                    Timeout == input.Timeout ||
                    (Timeout != null &&
                    Timeout.Equals(input.Timeout))
                ) && 
                (
                    Widgets == input.Widgets ||
                    Widgets != null &&
                    Widgets.SequenceEqual(input.Widgets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                if (Icon != null)
                    hashCode = hashCode * 59 + Icon.GetHashCode();
                if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                if (Parent != null)
                    hashCode = hashCode * 59 + Parent.GetHashCode();
                if (Leaf != null)
                    hashCode = hashCode * 59 + Leaf.GetHashCode();
                if (Timeout != null)
                    hashCode = hashCode * 59 + Timeout.GetHashCode();
                if (Widgets != null)
                    hashCode = hashCode * 59 + Widgets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
