/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Openhab.Client.Model
{
    /// <summary>
    /// FloorplanConfigBean
    /// </summary>
    [DataContract]
    public partial class FloorplanConfigBean :  IEquatable<FloorplanConfigBean>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FloorplanConfigBean" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="category">category.</param>
        /// <param name="imgBase64">imgBase64.</param>
        /// <param name="imgType">imgType.</param>
        /// <param name="hotspots">hotspots.</param>
        public FloorplanConfigBean(int? id = default(int?), string name = default(string), string category = default(string), string imgBase64 = default(string), string imgType = default(string), List<FloorplanHotspotConfigBean> hotspots = default(List<FloorplanHotspotConfigBean>))
        {
            Id = id;
            Name = name;
            Category = category;
            ImgBase64 = imgBase64;
            ImgType = imgType;
            Hotspots = hotspots;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets ImgBase64
        /// </summary>
        [DataMember(Name="imgBase64", EmitDefaultValue=false)]
        public string ImgBase64 { get; set; }

        /// <summary>
        /// Gets or Sets ImgType
        /// </summary>
        [DataMember(Name="imgType", EmitDefaultValue=false)]
        public string ImgType { get; set; }

        /// <summary>
        /// Gets or Sets Hotspots
        /// </summary>
        [DataMember(Name="hotspots", EmitDefaultValue=false)]
        public List<FloorplanHotspotConfigBean> Hotspots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FloorplanConfigBean {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ImgBase64: ").Append(ImgBase64).Append("\n");
            sb.Append("  ImgType: ").Append(ImgType).Append("\n");
            sb.Append("  Hotspots: ").Append(Hotspots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FloorplanConfigBean);
        }

        /// <summary>
        /// Returns true if FloorplanConfigBean instances are equal
        /// </summary>
        /// <param name="input">Instance of FloorplanConfigBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FloorplanConfigBean input)
        {
            if (input == null)
                return false;

            return 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Category == input.Category ||
                    (Category != null &&
                    Category.Equals(input.Category))
                ) && 
                (
                    ImgBase64 == input.ImgBase64 ||
                    (ImgBase64 != null &&
                    ImgBase64.Equals(input.ImgBase64))
                ) && 
                (
                    ImgType == input.ImgType ||
                    (ImgType != null &&
                    ImgType.Equals(input.ImgType))
                ) && 
                (
                    Hotspots == input.Hotspots ||
                    Hotspots != null &&
                    Hotspots.SequenceEqual(input.Hotspots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (ImgBase64 != null)
                    hashCode = hashCode * 59 + ImgBase64.GetHashCode();
                if (ImgType != null)
                    hashCode = hashCode * 59 + ImgType.GetHashCode();
                if (Hotspots != null)
                    hashCode = hashCode * 59 + Hotspots.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
