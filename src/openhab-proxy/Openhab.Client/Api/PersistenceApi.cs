/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Openhab.Client.Client;
using Openhab.Client.Model;
using RestSharp;

namespace Openhab.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersistenceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete item data from a specific persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service.</param>
        /// <param name="itemname">The item name.</param>
        /// <param name="starttime">Start time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="endtime">End time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> HttpDeletePersistenceServiceItem (string serviceId, string itemname, string starttime, string endtime);

        /// <summary>
        /// Delete item data from a specific persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service.</param>
        /// <param name="itemname">The item name.</param>
        /// <param name="starttime">Start time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="endtime">End time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> HttpDeletePersistenceServiceItemWithHttpInfo (string serviceId, string itemname, string starttime, string endtime);
        /// <summary>
        /// Gets item persistence data from the persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <param name="starttime">Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="endtime">End time of the data to return. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="page">Page number of data to return. This parameter will enable paging. (optional)</param>
        /// <param name="pagelength">The length of each page. (optional)</param>
        /// <param name="boundary">Gets one value before and after the requested period. (optional)</param>
        /// <returns>ItemHistoryDTO</returns>
        ItemHistoryDTO HttpGetPersistenceItemData (string itemname, string serviceId = null, string starttime = null, string endtime = null, int? page = null, int? pagelength = null, bool? boundary = null);

        /// <summary>
        /// Gets item persistence data from the persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <param name="starttime">Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="endtime">End time of the data to return. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="page">Page number of data to return. This parameter will enable paging. (optional)</param>
        /// <param name="pagelength">The length of each page. (optional)</param>
        /// <param name="boundary">Gets one value before and after the requested period. (optional)</param>
        /// <returns>ApiResponse of ItemHistoryDTO</returns>
        ApiResponse<ItemHistoryDTO> HttpGetPersistenceItemDataWithHttpInfo (string itemname, string serviceId = null, string starttime = null, string endtime = null, int? page = null, int? pagelength = null, bool? boundary = null);
        /// <summary>
        /// Gets a list of items available via a specific persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> HttpGetPersistenceServiceItems (string serviceId = null);

        /// <summary>
        /// Gets a list of items available via a specific persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> HttpGetPersistenceServiceItemsWithHttpInfo (string serviceId = null);
        /// <summary>
        /// Gets a list of persistence services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> HttpGetPersistenceServices (string acceptLanguage = null);

        /// <summary>
        /// Gets a list of persistence services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> HttpGetPersistenceServicesWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Stores item persistence data into the persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name.</param>
        /// <param name="time">Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="state">The state to store.</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>ItemHistoryDTO</returns>
        ItemHistoryDTO HttpPutPersistenceItemData (string itemname, string time, string state, string serviceId = null);

        /// <summary>
        /// Stores item persistence data into the persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name.</param>
        /// <param name="time">Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="state">The state to store.</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>ApiResponse of ItemHistoryDTO</returns>
        ApiResponse<ItemHistoryDTO> HttpPutPersistenceItemDataWithHttpInfo (string itemname, string time, string state, string serviceId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete item data from a specific persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service.</param>
        /// <param name="itemname">The item name.</param>
        /// <param name="starttime">Start time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="endtime">End time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> HttpDeletePersistenceServiceItemAsync (string serviceId, string itemname, string starttime, string endtime);

        /// <summary>
        /// Delete item data from a specific persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service.</param>
        /// <param name="itemname">The item name.</param>
        /// <param name="starttime">Start time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="endtime">End time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> HttpDeletePersistenceServiceItemAsyncWithHttpInfo (string serviceId, string itemname, string starttime, string endtime);
        /// <summary>
        /// Gets item persistence data from the persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <param name="starttime">Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="endtime">End time of the data to return. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="page">Page number of data to return. This parameter will enable paging. (optional)</param>
        /// <param name="pagelength">The length of each page. (optional)</param>
        /// <param name="boundary">Gets one value before and after the requested period. (optional)</param>
        /// <returns>Task of ItemHistoryDTO</returns>
        System.Threading.Tasks.Task<ItemHistoryDTO> HttpGetPersistenceItemDataAsync (string itemname, string serviceId = null, string starttime = null, string endtime = null, int? page = null, int? pagelength = null, bool? boundary = null);

        /// <summary>
        /// Gets item persistence data from the persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <param name="starttime">Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="endtime">End time of the data to return. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="page">Page number of data to return. This parameter will enable paging. (optional)</param>
        /// <param name="pagelength">The length of each page. (optional)</param>
        /// <param name="boundary">Gets one value before and after the requested period. (optional)</param>
        /// <returns>Task of ApiResponse (ItemHistoryDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemHistoryDTO>> HttpGetPersistenceItemDataAsyncWithHttpInfo (string itemname, string serviceId = null, string starttime = null, string endtime = null, int? page = null, int? pagelength = null, bool? boundary = null);
        /// <summary>
        /// Gets a list of items available via a specific persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> HttpGetPersistenceServiceItemsAsync (string serviceId = null);

        /// <summary>
        /// Gets a list of items available via a specific persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> HttpGetPersistenceServiceItemsAsyncWithHttpInfo (string serviceId = null);
        /// <summary>
        /// Gets a list of persistence services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> HttpGetPersistenceServicesAsync (string acceptLanguage = null);

        /// <summary>
        /// Gets a list of persistence services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> HttpGetPersistenceServicesAsyncWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Stores item persistence data into the persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name.</param>
        /// <param name="time">Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="state">The state to store.</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>Task of ItemHistoryDTO</returns>
        System.Threading.Tasks.Task<ItemHistoryDTO> HttpPutPersistenceItemDataAsync (string itemname, string time, string state, string serviceId = null);

        /// <summary>
        /// Stores item persistence data into the persistence service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name.</param>
        /// <param name="time">Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="state">The state to store.</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>Task of ApiResponse (ItemHistoryDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemHistoryDTO>> HttpPutPersistenceItemDataAsyncWithHttpInfo (string itemname, string time, string state, string serviceId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersistenceApi : IPersistenceApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersistenceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersistenceApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersistenceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersistenceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete item data from a specific persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service.</param>
        /// <param name="itemname">The item name.</param>
        /// <param name="starttime">Start time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="endtime">End time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> HttpDeletePersistenceServiceItem (string serviceId, string itemname, string starttime, string endtime)
        {
             ApiResponse<List<string>> localVarResponse = HttpDeletePersistenceServiceItemWithHttpInfo(serviceId, itemname, starttime, endtime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete item data from a specific persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service.</param>
        /// <param name="itemname">The item name.</param>
        /// <param name="starttime">Start time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="endtime">End time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > HttpDeletePersistenceServiceItemWithHttpInfo (string serviceId, string itemname, string starttime, string endtime)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling PersistenceApi->HttpDeletePersistenceServiceItem");
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling PersistenceApi->HttpDeletePersistenceServiceItem");
            // verify the required parameter 'starttime' is set
            if (starttime == null)
                throw new ApiException(400, "Missing required parameter 'starttime' when calling PersistenceApi->HttpDeletePersistenceServiceItem");
            // verify the required parameter 'endtime' is set
            if (endtime == null)
                throw new ApiException(400, "Missing required parameter 'endtime' when calling PersistenceApi->HttpDeletePersistenceServiceItem");

            var localVarPath = "/persistence/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (serviceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceId", serviceId)); // query parameter
            if (starttime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "starttime", starttime)); // query parameter
            if (endtime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "endtime", endtime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpDeletePersistenceServiceItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Delete item data from a specific persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service.</param>
        /// <param name="itemname">The item name.</param>
        /// <param name="starttime">Start time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="endtime">End time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> HttpDeletePersistenceServiceItemAsync (string serviceId, string itemname, string starttime, string endtime)
        {
             ApiResponse<List<string>> localVarResponse = await HttpDeletePersistenceServiceItemAsyncWithHttpInfo(serviceId, itemname, starttime, endtime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete item data from a specific persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service.</param>
        /// <param name="itemname">The item name.</param>
        /// <param name="starttime">Start time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="endtime">End time of the data to return. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> HttpDeletePersistenceServiceItemAsyncWithHttpInfo (string serviceId, string itemname, string starttime, string endtime)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling PersistenceApi->HttpDeletePersistenceServiceItem");
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling PersistenceApi->HttpDeletePersistenceServiceItem");
            // verify the required parameter 'starttime' is set
            if (starttime == null)
                throw new ApiException(400, "Missing required parameter 'starttime' when calling PersistenceApi->HttpDeletePersistenceServiceItem");
            // verify the required parameter 'endtime' is set
            if (endtime == null)
                throw new ApiException(400, "Missing required parameter 'endtime' when calling PersistenceApi->HttpDeletePersistenceServiceItem");

            var localVarPath = "/persistence/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (serviceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceId", serviceId)); // query parameter
            if (starttime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "starttime", starttime)); // query parameter
            if (endtime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "endtime", endtime)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpDeletePersistenceServiceItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets item persistence data from the persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <param name="starttime">Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="endtime">End time of the data to return. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="page">Page number of data to return. This parameter will enable paging. (optional)</param>
        /// <param name="pagelength">The length of each page. (optional)</param>
        /// <param name="boundary">Gets one value before and after the requested period. (optional)</param>
        /// <returns>ItemHistoryDTO</returns>
        public ItemHistoryDTO HttpGetPersistenceItemData (string itemname, string serviceId = null, string starttime = null, string endtime = null, int? page = null, int? pagelength = null, bool? boundary = null)
        {
             ApiResponse<ItemHistoryDTO> localVarResponse = HttpGetPersistenceItemDataWithHttpInfo(itemname, serviceId, starttime, endtime, page, pagelength, boundary);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets item persistence data from the persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <param name="starttime">Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="endtime">End time of the data to return. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="page">Page number of data to return. This parameter will enable paging. (optional)</param>
        /// <param name="pagelength">The length of each page. (optional)</param>
        /// <param name="boundary">Gets one value before and after the requested period. (optional)</param>
        /// <returns>ApiResponse of ItemHistoryDTO</returns>
        public ApiResponse< ItemHistoryDTO > HttpGetPersistenceItemDataWithHttpInfo (string itemname, string serviceId = null, string starttime = null, string endtime = null, int? page = null, int? pagelength = null, bool? boundary = null)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling PersistenceApi->HttpGetPersistenceItemData");

            var localVarPath = "/persistence/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (serviceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceId", serviceId)); // query parameter
            if (starttime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "starttime", starttime)); // query parameter
            if (endtime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "endtime", endtime)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pagelength != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pagelength", pagelength)); // query parameter
            if (boundary != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "boundary", boundary)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetPersistenceItemData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemHistoryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemHistoryDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemHistoryDTO)));
        }

        /// <summary>
        /// Gets item persistence data from the persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <param name="starttime">Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="endtime">End time of the data to return. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="page">Page number of data to return. This parameter will enable paging. (optional)</param>
        /// <param name="pagelength">The length of each page. (optional)</param>
        /// <param name="boundary">Gets one value before and after the requested period. (optional)</param>
        /// <returns>Task of ItemHistoryDTO</returns>
        public async System.Threading.Tasks.Task<ItemHistoryDTO> HttpGetPersistenceItemDataAsync (string itemname, string serviceId = null, string starttime = null, string endtime = null, int? page = null, int? pagelength = null, bool? boundary = null)
        {
             ApiResponse<ItemHistoryDTO> localVarResponse = await HttpGetPersistenceItemDataAsyncWithHttpInfo(itemname, serviceId, starttime, endtime, page, pagelength, boundary);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets item persistence data from the persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <param name="starttime">Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="endtime">End time of the data to return. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ] (optional)</param>
        /// <param name="page">Page number of data to return. This parameter will enable paging. (optional)</param>
        /// <param name="pagelength">The length of each page. (optional)</param>
        /// <param name="boundary">Gets one value before and after the requested period. (optional)</param>
        /// <returns>Task of ApiResponse (ItemHistoryDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemHistoryDTO>> HttpGetPersistenceItemDataAsyncWithHttpInfo (string itemname, string serviceId = null, string starttime = null, string endtime = null, int? page = null, int? pagelength = null, bool? boundary = null)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling PersistenceApi->HttpGetPersistenceItemData");

            var localVarPath = "/persistence/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (serviceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceId", serviceId)); // query parameter
            if (starttime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "starttime", starttime)); // query parameter
            if (endtime != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "endtime", endtime)); // query parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pagelength != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pagelength", pagelength)); // query parameter
            if (boundary != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "boundary", boundary)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetPersistenceItemData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemHistoryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemHistoryDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemHistoryDTO)));
        }

        /// <summary>
        /// Gets a list of items available via a specific persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> HttpGetPersistenceServiceItems (string serviceId = null)
        {
             ApiResponse<List<string>> localVarResponse = HttpGetPersistenceServiceItemsWithHttpInfo(serviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of items available via a specific persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > HttpGetPersistenceServiceItemsWithHttpInfo (string serviceId = null)
        {

            var localVarPath = "/persistence/items";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceId", serviceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetPersistenceServiceItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of items available via a specific persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> HttpGetPersistenceServiceItemsAsync (string serviceId = null)
        {
             ApiResponse<List<string>> localVarResponse = await HttpGetPersistenceServiceItemsAsyncWithHttpInfo(serviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of items available via a specific persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> HttpGetPersistenceServiceItemsAsyncWithHttpInfo (string serviceId = null)
        {

            var localVarPath = "/persistence/items";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceId", serviceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetPersistenceServiceItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of persistence services. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> HttpGetPersistenceServices (string acceptLanguage = null)
        {
             ApiResponse<List<string>> localVarResponse = HttpGetPersistenceServicesWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of persistence services. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > HttpGetPersistenceServicesWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/persistence";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetPersistenceServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Gets a list of persistence services. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> HttpGetPersistenceServicesAsync (string acceptLanguage = null)
        {
             ApiResponse<List<string>> localVarResponse = await HttpGetPersistenceServicesAsyncWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of persistence services. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> HttpGetPersistenceServicesAsyncWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/persistence";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpGetPersistenceServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Stores item persistence data into the persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name.</param>
        /// <param name="time">Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="state">The state to store.</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>ItemHistoryDTO</returns>
        public ItemHistoryDTO HttpPutPersistenceItemData (string itemname, string time, string state, string serviceId = null)
        {
             ApiResponse<ItemHistoryDTO> localVarResponse = HttpPutPersistenceItemDataWithHttpInfo(itemname, time, state, serviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stores item persistence data into the persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name.</param>
        /// <param name="time">Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="state">The state to store.</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>ApiResponse of ItemHistoryDTO</returns>
        public ApiResponse< ItemHistoryDTO > HttpPutPersistenceItemDataWithHttpInfo (string itemname, string time, string state, string serviceId = null)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling PersistenceApi->HttpPutPersistenceItemData");
            // verify the required parameter 'time' is set
            if (time == null)
                throw new ApiException(400, "Missing required parameter 'time' when calling PersistenceApi->HttpPutPersistenceItemData");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling PersistenceApi->HttpPutPersistenceItemData");

            var localVarPath = "/persistence/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (serviceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceId", serviceId)); // query parameter
            if (time != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "time", time)); // query parameter
            if (state != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpPutPersistenceItemData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemHistoryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemHistoryDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemHistoryDTO)));
        }

        /// <summary>
        /// Stores item persistence data into the persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name.</param>
        /// <param name="time">Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="state">The state to store.</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>Task of ItemHistoryDTO</returns>
        public async System.Threading.Tasks.Task<ItemHistoryDTO> HttpPutPersistenceItemDataAsync (string itemname, string time, string state, string serviceId = null)
        {
             ApiResponse<ItemHistoryDTO> localVarResponse = await HttpPutPersistenceItemDataAsyncWithHttpInfo(itemname, time, state, serviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stores item persistence data into the persistence service. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">The item name.</param>
        /// <param name="time">Time of the data to be stored. Will default to current time. [yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ]</param>
        /// <param name="state">The state to store.</param>
        /// <param name="serviceId">Id of the persistence service. If not provided the default service will be used (optional)</param>
        /// <returns>Task of ApiResponse (ItemHistoryDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemHistoryDTO>> HttpPutPersistenceItemDataAsyncWithHttpInfo (string itemname, string time, string state, string serviceId = null)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling PersistenceApi->HttpPutPersistenceItemData");
            // verify the required parameter 'time' is set
            if (time == null)
                throw new ApiException(400, "Missing required parameter 'time' when calling PersistenceApi->HttpPutPersistenceItemData");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling PersistenceApi->HttpPutPersistenceItemData");

            var localVarPath = "/persistence/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (serviceId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceId", serviceId)); // query parameter
            if (time != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "time", time)); // query parameter
            if (state != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HttpPutPersistenceItemData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemHistoryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemHistoryDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemHistoryDTO)));
        }

    }
}
