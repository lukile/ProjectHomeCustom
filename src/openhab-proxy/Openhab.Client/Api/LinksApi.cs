/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Openhab.Client.Client;
using Openhab.Client.Model;
using RestSharp;

namespace Openhab.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILinksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all available links.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ItemChannelLinkDTO</returns>
        ItemChannelLinkDTO GetAll ();

        /// <summary>
        /// Gets all available links.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ItemChannelLinkDTO</returns>
        ApiResponse<ItemChannelLinkDTO> GetAllWithHttpInfo ();
        /// <summary>
        /// Retrieves links.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns></returns>
        void GetLink (string itemName, string channelUID);

        /// <summary>
        /// Retrieves links.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> GetLinkWithHttpInfo (string itemName, string channelUID);
        /// <summary>
        /// Tells whether automatic link mode is active or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        bool? IsAutomatic ();

        /// <summary>
        /// Tells whether automatic link mode is active or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> IsAutomaticWithHttpInfo ();
        /// <summary>
        /// Links item to a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <param name="body">link data (optional)</param>
        /// <returns></returns>
        void Link (string itemName, string channelUID, ItemChannelLinkDTO body = null);

        /// <summary>
        /// Links item to a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <param name="body">link data (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> LinkWithHttpInfo (string itemName, string channelUID, ItemChannelLinkDTO body = null);
        /// <summary>
        /// Unlinks item from a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns></returns>
        void Unlink (string itemName, string channelUID);

        /// <summary>
        /// Unlinks item from a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UnlinkWithHttpInfo (string itemName, string channelUID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all available links.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ItemChannelLinkDTO</returns>
        System.Threading.Tasks.Task<ItemChannelLinkDTO> GetAllAsync ();

        /// <summary>
        /// Gets all available links.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ItemChannelLinkDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemChannelLinkDTO>> GetAllAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves links.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetLinkAsync (string itemName, string channelUID);

        /// <summary>
        /// Retrieves links.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> GetLinkAsyncWithHttpInfo (string itemName, string channelUID);
        /// <summary>
        /// Tells whether automatic link mode is active or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> IsAutomaticAsync ();

        /// <summary>
        /// Tells whether automatic link mode is active or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> IsAutomaticAsyncWithHttpInfo ();
        /// <summary>
        /// Links item to a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <param name="body">link data (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LinkAsync (string itemName, string channelUID, ItemChannelLinkDTO body = null);

        /// <summary>
        /// Links item to a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <param name="body">link data (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> LinkAsyncWithHttpInfo (string itemName, string channelUID, ItemChannelLinkDTO body = null);
        /// <summary>
        /// Unlinks item from a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlinkAsync (string itemName, string channelUID);

        /// <summary>
        /// Unlinks item from a channel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UnlinkAsyncWithHttpInfo (string itemName, string channelUID);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LinksApi : ILinksApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LinksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LinksApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LinksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LinksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all available links. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ItemChannelLinkDTO</returns>
        public ItemChannelLinkDTO GetAll ()
        {
             ApiResponse<ItemChannelLinkDTO> localVarResponse = GetAllWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all available links. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ItemChannelLinkDTO</returns>
        public ApiResponse< ItemChannelLinkDTO > GetAllWithHttpInfo ()
        {

            var localVarPath = "/links";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemChannelLinkDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemChannelLinkDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemChannelLinkDTO)));
        }

        /// <summary>
        /// Gets all available links. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ItemChannelLinkDTO</returns>
        public async System.Threading.Tasks.Task<ItemChannelLinkDTO> GetAllAsync ()
        {
             ApiResponse<ItemChannelLinkDTO> localVarResponse = await GetAllAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all available links. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ItemChannelLinkDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemChannelLinkDTO>> GetAllAsyncWithHttpInfo ()
        {

            var localVarPath = "/links";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemChannelLinkDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemChannelLinkDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemChannelLinkDTO)));
        }

        /// <summary>
        /// Retrieves links. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns></returns>
        public void GetLink (string itemName, string channelUID)
        {
             GetLinkWithHttpInfo(itemName, channelUID);
        }

        /// <summary>
        /// Retrieves links. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> GetLinkWithHttpInfo (string itemName, string channelUID)
        {
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling LinksApi->GetLink");
            // verify the required parameter 'channelUID' is set
            if (channelUID == null)
                throw new ApiException(400, "Missing required parameter 'channelUID' when calling LinksApi->GetLink");

            var localVarPath = "/links/{itemName}/{channelUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemName != null) localVarPathParams.Add("itemName", Configuration.ApiClient.ParameterToString(itemName)); // path parameter
            if (channelUID != null) localVarPathParams.Add("channelUID", Configuration.ApiClient.ParameterToString(channelUID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves links. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetLinkAsync (string itemName, string channelUID)
        {
             await GetLinkAsyncWithHttpInfo(itemName, channelUID);

        }

        /// <summary>
        /// Retrieves links. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> GetLinkAsyncWithHttpInfo (string itemName, string channelUID)
        {
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling LinksApi->GetLink");
            // verify the required parameter 'channelUID' is set
            if (channelUID == null)
                throw new ApiException(400, "Missing required parameter 'channelUID' when calling LinksApi->GetLink");

            var localVarPath = "/links/{itemName}/{channelUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemName != null) localVarPathParams.Add("itemName", Configuration.ApiClient.ParameterToString(itemName)); // path parameter
            if (channelUID != null) localVarPathParams.Add("channelUID", Configuration.ApiClient.ParameterToString(channelUID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Tells whether automatic link mode is active or not 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>bool?</returns>
        public bool? IsAutomatic ()
        {
             ApiResponse<bool?> localVarResponse = IsAutomaticWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tells whether automatic link mode is active or not 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > IsAutomaticWithHttpInfo ()
        {

            var localVarPath = "/links/auto";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsAutomatic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Tells whether automatic link mode is active or not 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> IsAutomaticAsync ()
        {
             ApiResponse<bool?> localVarResponse = await IsAutomaticAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tells whether automatic link mode is active or not 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> IsAutomaticAsyncWithHttpInfo ()
        {

            var localVarPath = "/links/auto";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsAutomatic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Links item to a channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <param name="body">link data (optional)</param>
        /// <returns></returns>
        public void Link (string itemName, string channelUID, ItemChannelLinkDTO body = null)
        {
             LinkWithHttpInfo(itemName, channelUID, body);
        }

        /// <summary>
        /// Links item to a channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <param name="body">link data (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> LinkWithHttpInfo (string itemName, string channelUID, ItemChannelLinkDTO body = null)
        {
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling LinksApi->Link");
            // verify the required parameter 'channelUID' is set
            if (channelUID == null)
                throw new ApiException(400, "Missing required parameter 'channelUID' when calling LinksApi->Link");

            var localVarPath = "/links/{itemName}/{channelUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemName != null) localVarPathParams.Add("itemName", Configuration.ApiClient.ParameterToString(itemName)); // path parameter
            if (channelUID != null) localVarPathParams.Add("channelUID", Configuration.ApiClient.ParameterToString(channelUID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Link", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Links item to a channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <param name="body">link data (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LinkAsync (string itemName, string channelUID, ItemChannelLinkDTO body = null)
        {
             await LinkAsyncWithHttpInfo(itemName, channelUID, body);

        }

        /// <summary>
        /// Links item to a channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <param name="body">link data (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> LinkAsyncWithHttpInfo (string itemName, string channelUID, ItemChannelLinkDTO body = null)
        {
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling LinksApi->Link");
            // verify the required parameter 'channelUID' is set
            if (channelUID == null)
                throw new ApiException(400, "Missing required parameter 'channelUID' when calling LinksApi->Link");

            var localVarPath = "/links/{itemName}/{channelUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemName != null) localVarPathParams.Add("itemName", Configuration.ApiClient.ParameterToString(itemName)); // path parameter
            if (channelUID != null) localVarPathParams.Add("channelUID", Configuration.ApiClient.ParameterToString(channelUID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Link", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unlinks item from a channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns></returns>
        public void Unlink (string itemName, string channelUID)
        {
             UnlinkWithHttpInfo(itemName, channelUID);
        }

        /// <summary>
        /// Unlinks item from a channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UnlinkWithHttpInfo (string itemName, string channelUID)
        {
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling LinksApi->Unlink");
            // verify the required parameter 'channelUID' is set
            if (channelUID == null)
                throw new ApiException(400, "Missing required parameter 'channelUID' when calling LinksApi->Unlink");

            var localVarPath = "/links/{itemName}/{channelUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemName != null) localVarPathParams.Add("itemName", Configuration.ApiClient.ParameterToString(itemName)); // path parameter
            if (channelUID != null) localVarPathParams.Add("channelUID", Configuration.ApiClient.ParameterToString(channelUID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Unlink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unlinks item from a channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlinkAsync (string itemName, string channelUID)
        {
             await UnlinkAsyncWithHttpInfo(itemName, channelUID);

        }

        /// <summary>
        /// Unlinks item from a channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">itemName</param>
        /// <param name="channelUID">channelUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UnlinkAsyncWithHttpInfo (string itemName, string channelUID)
        {
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling LinksApi->Unlink");
            // verify the required parameter 'channelUID' is set
            if (channelUID == null)
                throw new ApiException(400, "Missing required parameter 'channelUID' when calling LinksApi->Unlink");

            var localVarPath = "/links/{itemName}/{channelUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemName != null) localVarPathParams.Add("itemName", Configuration.ApiClient.ParameterToString(itemName)); // path parameter
            if (channelUID != null) localVarPathParams.Add("channelUID", Configuration.ApiClient.ParameterToString(channelUID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Unlink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
