/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Openhab.Client.Client;
using Openhab.Client.Model;
using RestSharp;

namespace Openhab.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInboxApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Approves the discovery result by adding the thing to the registry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="body">thing label (optional)</param>
        /// <returns></returns>
        void Approve (string thingUID, string acceptLanguage = null, string body = null);

        /// <summary>
        /// Approves the discovery result by adding the thing to the registry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="body">thing label (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ApproveWithHttpInfo (string thingUID, string acceptLanguage = null, string body = null);
        /// <summary>
        /// Removes the discovery result from the inbox.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns></returns>
        void Delete (string thingUID);

        /// <summary>
        /// Removes the discovery result from the inbox.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> DeleteWithHttpInfo (string thingUID);
        /// <summary>
        /// Get all discovered things.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>DiscoveryResultDTO</returns>
        DiscoveryResultDTO GetAll ();

        /// <summary>
        /// Get all discovered things.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DiscoveryResultDTO</returns>
        ApiResponse<DiscoveryResultDTO> GetAllWithHttpInfo ();
        /// <summary>
        /// Flags a discovery result as ignored for further processing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns></returns>
        void Ignore (string thingUID);

        /// <summary>
        /// Flags a discovery result as ignored for further processing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> IgnoreWithHttpInfo (string thingUID);
        /// <summary>
        /// Removes ignore flag from a discovery result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns></returns>
        void Unignore (string thingUID);

        /// <summary>
        /// Removes ignore flag from a discovery result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UnignoreWithHttpInfo (string thingUID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Approves the discovery result by adding the thing to the registry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="body">thing label (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApproveAsync (string thingUID, string acceptLanguage = null, string body = null);

        /// <summary>
        /// Approves the discovery result by adding the thing to the registry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="body">thing label (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> ApproveAsyncWithHttpInfo (string thingUID, string acceptLanguage = null, string body = null);
        /// <summary>
        /// Removes the discovery result from the inbox.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string thingUID);

        /// <summary>
        /// Removes the discovery result from the inbox.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> DeleteAsyncWithHttpInfo (string thingUID);
        /// <summary>
        /// Get all discovered things.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DiscoveryResultDTO</returns>
        System.Threading.Tasks.Task<DiscoveryResultDTO> GetAllAsync ();

        /// <summary>
        /// Get all discovered things.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DiscoveryResultDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiscoveryResultDTO>> GetAllAsyncWithHttpInfo ();
        /// <summary>
        /// Flags a discovery result as ignored for further processing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IgnoreAsync (string thingUID);

        /// <summary>
        /// Flags a discovery result as ignored for further processing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> IgnoreAsyncWithHttpInfo (string thingUID);
        /// <summary>
        /// Removes ignore flag from a discovery result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnignoreAsync (string thingUID);

        /// <summary>
        /// Removes ignore flag from a discovery result.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UnignoreAsyncWithHttpInfo (string thingUID);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InboxApi : IInboxApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InboxApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InboxApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InboxApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Approves the discovery result by adding the thing to the registry. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="body">thing label (optional)</param>
        /// <returns></returns>
        public void Approve (string thingUID, string acceptLanguage = null, string body = null)
        {
             ApproveWithHttpInfo(thingUID, acceptLanguage, body);
        }

        /// <summary>
        /// Approves the discovery result by adding the thing to the registry. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="body">thing label (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ApproveWithHttpInfo (string thingUID, string acceptLanguage = null, string body = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling InboxApi->Approve");

            var localVarPath = "/inbox/{thingUID}/approve";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "text/plain"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Approve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Approves the discovery result by adding the thing to the registry. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="body">thing label (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApproveAsync (string thingUID, string acceptLanguage = null, string body = null)
        {
             await ApproveAsyncWithHttpInfo(thingUID, acceptLanguage, body);

        }

        /// <summary>
        /// Approves the discovery result by adding the thing to the registry. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="body">thing label (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> ApproveAsyncWithHttpInfo (string thingUID, string acceptLanguage = null, string body = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling InboxApi->Approve");

            var localVarPath = "/inbox/{thingUID}/approve";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "text/plain"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Approve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes the discovery result from the inbox. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns></returns>
        public void Delete (string thingUID)
        {
             DeleteWithHttpInfo(thingUID);
        }

        /// <summary>
        /// Removes the discovery result from the inbox. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> DeleteWithHttpInfo (string thingUID)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling InboxApi->Delete");

            var localVarPath = "/inbox/{thingUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes the discovery result from the inbox. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string thingUID)
        {
             await DeleteAsyncWithHttpInfo(thingUID);

        }

        /// <summary>
        /// Removes the discovery result from the inbox. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> DeleteAsyncWithHttpInfo (string thingUID)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling InboxApi->Delete");

            var localVarPath = "/inbox/{thingUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all discovered things. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>DiscoveryResultDTO</returns>
        public DiscoveryResultDTO GetAll ()
        {
             ApiResponse<DiscoveryResultDTO> localVarResponse = GetAllWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all discovered things. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DiscoveryResultDTO</returns>
        public ApiResponse< DiscoveryResultDTO > GetAllWithHttpInfo ()
        {

            var localVarPath = "/inbox";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiscoveryResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DiscoveryResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiscoveryResultDTO)));
        }

        /// <summary>
        /// Get all discovered things. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DiscoveryResultDTO</returns>
        public async System.Threading.Tasks.Task<DiscoveryResultDTO> GetAllAsync ()
        {
             ApiResponse<DiscoveryResultDTO> localVarResponse = await GetAllAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all discovered things. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DiscoveryResultDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DiscoveryResultDTO>> GetAllAsyncWithHttpInfo ()
        {

            var localVarPath = "/inbox";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DiscoveryResultDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DiscoveryResultDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DiscoveryResultDTO)));
        }

        /// <summary>
        /// Flags a discovery result as ignored for further processing. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns></returns>
        public void Ignore (string thingUID)
        {
             IgnoreWithHttpInfo(thingUID);
        }

        /// <summary>
        /// Flags a discovery result as ignored for further processing. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> IgnoreWithHttpInfo (string thingUID)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling InboxApi->Ignore");

            var localVarPath = "/inbox/{thingUID}/ignore";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ignore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Flags a discovery result as ignored for further processing. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IgnoreAsync (string thingUID)
        {
             await IgnoreAsyncWithHttpInfo(thingUID);

        }

        /// <summary>
        /// Flags a discovery result as ignored for further processing. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> IgnoreAsyncWithHttpInfo (string thingUID)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling InboxApi->Ignore");

            var localVarPath = "/inbox/{thingUID}/ignore";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ignore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes ignore flag from a discovery result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns></returns>
        public void Unignore (string thingUID)
        {
             UnignoreWithHttpInfo(thingUID);
        }

        /// <summary>
        /// Removes ignore flag from a discovery result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UnignoreWithHttpInfo (string thingUID)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling InboxApi->Unignore");

            var localVarPath = "/inbox/{thingUID}/unignore";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Unignore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes ignore flag from a discovery result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnignoreAsync (string thingUID)
        {
             await UnignoreAsyncWithHttpInfo(thingUID);

        }

        /// <summary>
        /// Removes ignore flag from a discovery result. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UnignoreAsyncWithHttpInfo (string thingUID)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling InboxApi->Unignore");

            var localVarPath = "/inbox/{thingUID}/unignore";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Unignore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
