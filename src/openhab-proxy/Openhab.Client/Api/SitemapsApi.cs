/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Openhab.Client.Client;
using RestSharp;

namespace Openhab.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISitemapsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a sitemap event subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        object CreateEventSubscription ();

        /// <summary>
        /// Creates a sitemap event subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> CreateEventSubscriptionWithHttpInfo ();
        /// <summary>
        /// Polls the data for a sitemap.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="pageid">page id</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="subscriptionid">subscriptionid (optional)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns></returns>
        void GetPageData (string sitemapname, string pageid, string acceptLanguage = null, string subscriptionid = null, bool? includeHidden = null);

        /// <summary>
        /// Polls the data for a sitemap.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="pageid">page id</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="subscriptionid">subscriptionid (optional)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> GetPageDataWithHttpInfo (string sitemapname, string pageid, string acceptLanguage = null, string subscriptionid = null, bool? includeHidden = null);
        /// <summary>
        /// Get sitemap by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="jsoncallback"> (optional, default to callback)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns></returns>
        void GetSitemapData (string sitemapname, string acceptLanguage = null, string type = null, string jsoncallback = null, bool? includeHidden = null);

        /// <summary>
        /// Get sitemap by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="jsoncallback"> (optional, default to callback)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> GetSitemapDataWithHttpInfo (string sitemapname, string acceptLanguage = null, string type = null, string jsoncallback = null, bool? includeHidden = null);
        /// <summary>
        /// Get sitemap events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">subscription id</param>
        /// <param name="sitemap">sitemap name (optional)</param>
        /// <param name="pageid">page id (optional)</param>
        /// <returns></returns>
        void GetSitemapEvents (string subscriptionid, string sitemap = null, string pageid = null);

        /// <summary>
        /// Get sitemap events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">subscription id</param>
        /// <param name="sitemap">sitemap name (optional)</param>
        /// <param name="pageid">page id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> GetSitemapEventsWithHttpInfo (string subscriptionid, string sitemap = null, string pageid = null);
        /// <summary>
        /// Get all available sitemaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetSitemaps ();

        /// <summary>
        /// Get all available sitemaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> GetSitemapsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a sitemap event subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<object> CreateEventSubscriptionAsync ();

        /// <summary>
        /// Creates a sitemap event subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> CreateEventSubscriptionAsyncWithHttpInfo ();
        /// <summary>
        /// Polls the data for a sitemap.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="pageid">page id</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="subscriptionid">subscriptionid (optional)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPageDataAsync (string sitemapname, string pageid, string acceptLanguage = null, string subscriptionid = null, bool? includeHidden = null);

        /// <summary>
        /// Polls the data for a sitemap.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="pageid">page id</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="subscriptionid">subscriptionid (optional)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> GetPageDataAsyncWithHttpInfo (string sitemapname, string pageid, string acceptLanguage = null, string subscriptionid = null, bool? includeHidden = null);
        /// <summary>
        /// Get sitemap by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="jsoncallback"> (optional, default to callback)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSitemapDataAsync (string sitemapname, string acceptLanguage = null, string type = null, string jsoncallback = null, bool? includeHidden = null);

        /// <summary>
        /// Get sitemap by name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="jsoncallback"> (optional, default to callback)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> GetSitemapDataAsyncWithHttpInfo (string sitemapname, string acceptLanguage = null, string type = null, string jsoncallback = null, bool? includeHidden = null);
        /// <summary>
        /// Get sitemap events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">subscription id</param>
        /// <param name="sitemap">sitemap name (optional)</param>
        /// <param name="pageid">page id (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSitemapEventsAsync (string subscriptionid, string sitemap = null, string pageid = null);

        /// <summary>
        /// Get sitemap events.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">subscription id</param>
        /// <param name="sitemap">sitemap name (optional)</param>
        /// <param name="pageid">page id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> GetSitemapEventsAsyncWithHttpInfo (string subscriptionid, string sitemap = null, string pageid = null);
        /// <summary>
        /// Get all available sitemaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSitemapsAsync ();

        /// <summary>
        /// Get all available sitemaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> GetSitemapsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SitemapsApi : ISitemapsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SitemapsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SitemapsApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SitemapsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SitemapsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a sitemap event subscription. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public object CreateEventSubscription ()
        {
             ApiResponse<object> localVarResponse = CreateEventSubscriptionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a sitemap event subscription. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< object > CreateEventSubscriptionWithHttpInfo ()
        {

            var localVarPath = "/sitemaps/events/subscribe";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Creates a sitemap event subscription. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<object> CreateEventSubscriptionAsync ()
        {
             ApiResponse<object> localVarResponse = await CreateEventSubscriptionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a sitemap event subscription. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> CreateEventSubscriptionAsyncWithHttpInfo ()
        {

            var localVarPath = "/sitemaps/events/subscribe";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Polls the data for a sitemap. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="pageid">page id</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="subscriptionid">subscriptionid (optional)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns></returns>
        public void GetPageData (string sitemapname, string pageid, string acceptLanguage = null, string subscriptionid = null, bool? includeHidden = null)
        {
             GetPageDataWithHttpInfo(sitemapname, pageid, acceptLanguage, subscriptionid, includeHidden);
        }

        /// <summary>
        /// Polls the data for a sitemap. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="pageid">page id</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="subscriptionid">subscriptionid (optional)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> GetPageDataWithHttpInfo (string sitemapname, string pageid, string acceptLanguage = null, string subscriptionid = null, bool? includeHidden = null)
        {
            // verify the required parameter 'sitemapname' is set
            if (sitemapname == null)
                throw new ApiException(400, "Missing required parameter 'sitemapname' when calling SitemapsApi->GetPageData");
            // verify the required parameter 'pageid' is set
            if (pageid == null)
                throw new ApiException(400, "Missing required parameter 'pageid' when calling SitemapsApi->GetPageData");

            var localVarPath = "/sitemaps/{sitemapname}/{pageid}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sitemapname != null) localVarPathParams.Add("sitemapname", Configuration.ApiClient.ParameterToString(sitemapname)); // path parameter
            if (pageid != null) localVarPathParams.Add("pageid", Configuration.ApiClient.ParameterToString(pageid)); // path parameter
            if (subscriptionid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "subscriptionid", subscriptionid)); // query parameter
            if (includeHidden != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHidden", includeHidden)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Polls the data for a sitemap. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="pageid">page id</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="subscriptionid">subscriptionid (optional)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPageDataAsync (string sitemapname, string pageid, string acceptLanguage = null, string subscriptionid = null, bool? includeHidden = null)
        {
             await GetPageDataAsyncWithHttpInfo(sitemapname, pageid, acceptLanguage, subscriptionid, includeHidden);

        }

        /// <summary>
        /// Polls the data for a sitemap. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="pageid">page id</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="subscriptionid">subscriptionid (optional)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> GetPageDataAsyncWithHttpInfo (string sitemapname, string pageid, string acceptLanguage = null, string subscriptionid = null, bool? includeHidden = null)
        {
            // verify the required parameter 'sitemapname' is set
            if (sitemapname == null)
                throw new ApiException(400, "Missing required parameter 'sitemapname' when calling SitemapsApi->GetPageData");
            // verify the required parameter 'pageid' is set
            if (pageid == null)
                throw new ApiException(400, "Missing required parameter 'pageid' when calling SitemapsApi->GetPageData");

            var localVarPath = "/sitemaps/{sitemapname}/{pageid}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sitemapname != null) localVarPathParams.Add("sitemapname", Configuration.ApiClient.ParameterToString(sitemapname)); // path parameter
            if (pageid != null) localVarPathParams.Add("pageid", Configuration.ApiClient.ParameterToString(pageid)); // path parameter
            if (subscriptionid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "subscriptionid", subscriptionid)); // query parameter
            if (includeHidden != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHidden", includeHidden)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get sitemap by name. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="jsoncallback"> (optional, default to callback)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns></returns>
        public void GetSitemapData (string sitemapname, string acceptLanguage = null, string type = null, string jsoncallback = null, bool? includeHidden = null)
        {
             GetSitemapDataWithHttpInfo(sitemapname, acceptLanguage, type, jsoncallback, includeHidden);
        }

        /// <summary>
        /// Get sitemap by name. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="jsoncallback"> (optional, default to callback)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> GetSitemapDataWithHttpInfo (string sitemapname, string acceptLanguage = null, string type = null, string jsoncallback = null, bool? includeHidden = null)
        {
            // verify the required parameter 'sitemapname' is set
            if (sitemapname == null)
                throw new ApiException(400, "Missing required parameter 'sitemapname' when calling SitemapsApi->GetSitemapData");

            var localVarPath = "/sitemaps/{sitemapname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sitemapname != null) localVarPathParams.Add("sitemapname", Configuration.ApiClient.ParameterToString(sitemapname)); // path parameter
            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (jsoncallback != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "jsoncallback", jsoncallback)); // query parameter
            if (includeHidden != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHidden", includeHidden)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitemapData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get sitemap by name. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="jsoncallback"> (optional, default to callback)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSitemapDataAsync (string sitemapname, string acceptLanguage = null, string type = null, string jsoncallback = null, bool? includeHidden = null)
        {
             await GetSitemapDataAsyncWithHttpInfo(sitemapname, acceptLanguage, type, jsoncallback, includeHidden);

        }

        /// <summary>
        /// Get sitemap by name. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sitemapname">sitemap name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="jsoncallback"> (optional, default to callback)</param>
        /// <param name="includeHidden">include hidden widgets (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> GetSitemapDataAsyncWithHttpInfo (string sitemapname, string acceptLanguage = null, string type = null, string jsoncallback = null, bool? includeHidden = null)
        {
            // verify the required parameter 'sitemapname' is set
            if (sitemapname == null)
                throw new ApiException(400, "Missing required parameter 'sitemapname' when calling SitemapsApi->GetSitemapData");

            var localVarPath = "/sitemaps/{sitemapname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sitemapname != null) localVarPathParams.Add("sitemapname", Configuration.ApiClient.ParameterToString(sitemapname)); // path parameter
            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (jsoncallback != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "jsoncallback", jsoncallback)); // query parameter
            if (includeHidden != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHidden", includeHidden)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitemapData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get sitemap events. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">subscription id</param>
        /// <param name="sitemap">sitemap name (optional)</param>
        /// <param name="pageid">page id (optional)</param>
        /// <returns></returns>
        public void GetSitemapEvents (string subscriptionid, string sitemap = null, string pageid = null)
        {
             GetSitemapEventsWithHttpInfo(subscriptionid, sitemap, pageid);
        }

        /// <summary>
        /// Get sitemap events. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">subscription id</param>
        /// <param name="sitemap">sitemap name (optional)</param>
        /// <param name="pageid">page id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> GetSitemapEventsWithHttpInfo (string subscriptionid, string sitemap = null, string pageid = null)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionid' when calling SitemapsApi->GetSitemapEvents");

            var localVarPath = "/sitemaps/events/{subscriptionid}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "text/event-stream"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionid != null) localVarPathParams.Add("subscriptionid", Configuration.ApiClient.ParameterToString(subscriptionid)); // path parameter
            if (sitemap != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sitemap", sitemap)); // query parameter
            if (pageid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageid", pageid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitemapEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get sitemap events. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">subscription id</param>
        /// <param name="sitemap">sitemap name (optional)</param>
        /// <param name="pageid">page id (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSitemapEventsAsync (string subscriptionid, string sitemap = null, string pageid = null)
        {
             await GetSitemapEventsAsyncWithHttpInfo(subscriptionid, sitemap, pageid);

        }

        /// <summary>
        /// Get sitemap events. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionid">subscription id</param>
        /// <param name="sitemap">sitemap name (optional)</param>
        /// <param name="pageid">page id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> GetSitemapEventsAsyncWithHttpInfo (string subscriptionid, string sitemap = null, string pageid = null)
        {
            // verify the required parameter 'subscriptionid' is set
            if (subscriptionid == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionid' when calling SitemapsApi->GetSitemapEvents");

            var localVarPath = "/sitemaps/events/{subscriptionid}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "text/event-stream"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionid != null) localVarPathParams.Add("subscriptionid", Configuration.ApiClient.ParameterToString(subscriptionid)); // path parameter
            if (sitemap != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sitemap", sitemap)); // query parameter
            if (pageid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageid", pageid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitemapEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all available sitemaps. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetSitemaps ()
        {
             GetSitemapsWithHttpInfo();
        }

        /// <summary>
        /// Get all available sitemaps. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> GetSitemapsWithHttpInfo ()
        {

            var localVarPath = "/sitemaps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitemaps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all available sitemaps. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSitemapsAsync ()
        {
             await GetSitemapsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Get all available sitemaps. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> GetSitemapsAsyncWithHttpInfo ()
        {

            var localVarPath = "/sitemaps";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSitemaps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
