/*
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Openhab.Client.Client;
using Openhab.Client.Model;
using RestSharp;

namespace Openhab.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a new member to a group item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns></returns>
        void AddMember(string itemName, string memberItemName);

        /// <summary>
        /// Adds a new member to a group item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> AddMemberWithHttpInfo(string itemName, string memberItemName);
        /// <summary>
        /// Adds metadata to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <param name="body">metadata</param>
        /// <returns></returns>
        void AddMetadata(string itemname, string _namespace, MetadataDTO body);

        /// <summary>
        /// Adds metadata to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <param name="body">metadata</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> AddMetadataWithHttpInfo(string itemname, string _namespace, MetadataDTO body);
        /// <summary>
        /// Adds a tag to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns></returns>
        void AddTag(string itemname, string tag);

        /// <summary>
        /// Adds a tag to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> AddTagWithHttpInfo(string itemname, string tag);
        /// <summary>
        /// Adds a new item to the registry or updates the existing item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">item data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>string</returns>
        string CreateOrUpdateItem(string itemname, GroupItemDTO body, string acceptLanguage = null);

        /// <summary>
        /// Adds a new item to the registry or updates the existing item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">item data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateOrUpdateItemWithHttpInfo(string itemname, GroupItemDTO body, string acceptLanguage = null);
        /// <summary>
        /// Adds a list of items to the registry or updates the existing items.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">array of item data</param>
        /// <returns>string</returns>
        string CreateOrUpdateItems(List<GroupItemDTO> body);

        /// <summary>
        /// Adds a list of items to the registry or updates the existing items.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">array of item data</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateOrUpdateItemsWithHttpInfo(List<GroupItemDTO> body);
        /// <summary>
        /// Gets a single item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <returns>EnrichedItemDTO</returns>
        EnrichedItemDTO GetItemData(string itemname, string acceptLanguage = null, string metadata = null);

        /// <summary>
        /// Gets a single item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <returns>ApiResponse of EnrichedItemDTO</returns>
        ApiResponse<EnrichedItemDTO> GetItemDataWithHttpInfo(string itemname, string acceptLanguage = null, string metadata = null);
        /// <summary>
        /// Get all available items.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type">item type filter (optional)</param>
        /// <param name="tags">item tag filter (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <param name="recursive">get member items recursively (optional, default to false)</param>
        /// <param name="fields">limit output to the given fields (comma separated) (optional)</param>
        /// <returns>List&lt;EnrichedItemDTO&gt;</returns>
        List<EnrichedItemDTO> GetItems(string acceptLanguage = null, string type = null, string tags = null, string metadata = null, bool? recursive = null, string fields = null);

        /// <summary>
        /// Get all available items.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type">item type filter (optional)</param>
        /// <param name="tags">item tag filter (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <param name="recursive">get member items recursively (optional, default to false)</param>
        /// <param name="fields">limit output to the given fields (comma separated) (optional)</param>
        /// <returns>ApiResponse of List&lt;EnrichedItemDTO&gt;</returns>
        ApiResponse<List<EnrichedItemDTO>> GetItemsWithHttpInfo(string acceptLanguage = null, string type = null, string tags = null, string metadata = null, bool? recursive = null, string fields = null);
        /// <summary>
        /// Gets the state of an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>string</returns>
        string GetPlainItemState(string itemname);

        /// <summary>
        /// Gets the state of an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetPlainItemStateWithHttpInfo(string itemname);
        /// <summary>
        /// Sends a command to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)</param>
        /// <returns></returns>
        void PostItemCommand(string itemname, string body);

        /// <summary>
        /// Sends a command to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> PostItemCommandWithHttpInfo(string itemname, string body);
        /// <summary>
        /// Updates the state of an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item state (e.g. ON, OFF)</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns></returns>
        void PutItemState(string itemname, string body, string acceptLanguage = null);

        /// <summary>
        /// Updates the state of an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item state (e.g. ON, OFF)</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> PutItemStateWithHttpInfo(string itemname, string body, string acceptLanguage = null);
        /// <summary>
        /// Removes an item from the registry.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns></returns>
        void RemoveItem(string itemname);

        /// <summary>
        /// Removes an item from the registry.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> RemoveItemWithHttpInfo(string itemname);
        /// <summary>
        /// Removes an existing member from a group item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns></returns>
        void RemoveMember(string itemName, string memberItemName);

        /// <summary>
        /// Removes an existing member from a group item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> RemoveMemberWithHttpInfo(string itemName, string memberItemName);
        /// <summary>
        /// Removes metadata from an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <returns></returns>
        void RemoveMetadata(string itemname, string _namespace);

        /// <summary>
        /// Removes metadata from an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> RemoveMetadataWithHttpInfo(string itemname, string _namespace);
        /// <summary>
        /// Removes a tag from an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns></returns>
        void RemoveTag(string itemname, string tag);

        /// <summary>
        /// Removes a tag from an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> RemoveTagWithHttpInfo(string itemname, string tag);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a new member to a group item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddMemberAsync(string itemName, string memberItemName);

        /// <summary>
        /// Adds a new member to a group item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> AddMemberAsyncWithHttpInfo(string itemName, string memberItemName);
        /// <summary>
        /// Adds metadata to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <param name="body">metadata</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddMetadataAsync(string itemname, string _namespace, MetadataDTO body);

        /// <summary>
        /// Adds metadata to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <param name="body">metadata</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> AddMetadataAsyncWithHttpInfo(string itemname, string _namespace, MetadataDTO body);
        /// <summary>
        /// Adds a tag to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddTagAsync(string itemname, string tag);

        /// <summary>
        /// Adds a tag to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> AddTagAsyncWithHttpInfo(string itemname, string tag);
        /// <summary>
        /// Adds a new item to the registry or updates the existing item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">item data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateOrUpdateItemAsync(string itemname, GroupItemDTO body, string acceptLanguage = null);

        /// <summary>
        /// Adds a new item to the registry or updates the existing item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">item data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateOrUpdateItemAsyncWithHttpInfo(string itemname, GroupItemDTO body, string acceptLanguage = null);
        /// <summary>
        /// Adds a list of items to the registry or updates the existing items.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">array of item data</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateOrUpdateItemsAsync(List<GroupItemDTO> body);

        /// <summary>
        /// Adds a list of items to the registry or updates the existing items.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">array of item data</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateOrUpdateItemsAsyncWithHttpInfo(List<GroupItemDTO> body);
        /// <summary>
        /// Gets a single item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <returns>Task of EnrichedItemDTO</returns>
        System.Threading.Tasks.Task<EnrichedItemDTO> GetItemDataAsync(string itemname, string acceptLanguage = null, string metadata = null);

        /// <summary>
        /// Gets a single item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <returns>Task of ApiResponse (EnrichedItemDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnrichedItemDTO>> GetItemDataAsyncWithHttpInfo(string itemname, string acceptLanguage = null, string metadata = null);
        /// <summary>
        /// Get all available items.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type">item type filter (optional)</param>
        /// <param name="tags">item tag filter (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <param name="recursive">get member items recursively (optional, default to false)</param>
        /// <param name="fields">limit output to the given fields (comma separated) (optional)</param>
        /// <returns>Task of List&lt;EnrichedItemDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EnrichedItemDTO>> GetItemsAsync(string acceptLanguage = null, string type = null, string tags = null, string metadata = null, bool? recursive = null, string fields = null);

        /// <summary>
        /// Get all available items.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type">item type filter (optional)</param>
        /// <param name="tags">item tag filter (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <param name="recursive">get member items recursively (optional, default to false)</param>
        /// <param name="fields">limit output to the given fields (comma separated) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EnrichedItemDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EnrichedItemDTO>>> GetItemsAsyncWithHttpInfo(string acceptLanguage = null, string type = null, string tags = null, string metadata = null, bool? recursive = null, string fields = null);
        /// <summary>
        /// Gets the state of an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetPlainItemStateAsync(string itemname);

        /// <summary>
        /// Gets the state of an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetPlainItemStateAsyncWithHttpInfo(string itemname);
        /// <summary>
        /// Sends a command to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostItemCommandAsync(string itemname, string body);

        /// <summary>
        /// Sends a command to an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> PostItemCommandAsyncWithHttpInfo(string itemname, string body);
        /// <summary>
        /// Updates the state of an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item state (e.g. ON, OFF)</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutItemStateAsync(string itemname, string body, string acceptLanguage = null);

        /// <summary>
        /// Updates the state of an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item state (e.g. ON, OFF)</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> PutItemStateAsyncWithHttpInfo(string itemname, string body, string acceptLanguage = null);
        /// <summary>
        /// Removes an item from the registry.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveItemAsync(string itemname);

        /// <summary>
        /// Removes an item from the registry.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> RemoveItemAsyncWithHttpInfo(string itemname);
        /// <summary>
        /// Removes an existing member from a group item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveMemberAsync(string itemName, string memberItemName);

        /// <summary>
        /// Removes an existing member from a group item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> RemoveMemberAsyncWithHttpInfo(string itemName, string memberItemName);
        /// <summary>
        /// Removes metadata from an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveMetadataAsync(string itemname, string _namespace);

        /// <summary>
        /// Removes metadata from an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> RemoveMetadataAsyncWithHttpInfo(string itemname, string _namespace);
        /// <summary>
        /// Removes a tag from an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveTagAsync(string itemname, string tag);

        /// <summary>
        /// Removes a tag from an item.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> RemoveTagAsyncWithHttpInfo(string itemname, string tag);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemsApi : IItemsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemsApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a new member to a group item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns></returns>
        public void AddMember(string itemName, string memberItemName)
        {
            AddMemberWithHttpInfo(itemName, memberItemName);
        }

        /// <summary>
        /// Adds a new member to a group item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> AddMemberWithHttpInfo(string itemName, string memberItemName)
        {
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling ItemsApi->AddMember");
            // verify the required parameter 'memberItemName' is set
            if (memberItemName == null)
                throw new ApiException(400, "Missing required parameter 'memberItemName' when calling ItemsApi->AddMember");

            var localVarPath = "/items/{itemName}/members/{memberItemName}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemName != null) localVarPathParams.Add("itemName", Configuration.ApiClient.ParameterToString(itemName)); // path parameter
            if (memberItemName != null) localVarPathParams.Add("memberItemName", Configuration.ApiClient.ParameterToString(memberItemName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a new member to a group item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddMemberAsync(string itemName, string memberItemName)
        {
            await AddMemberAsyncWithHttpInfo(itemName, memberItemName);

        }

        /// <summary>
        /// Adds a new member to a group item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> AddMemberAsyncWithHttpInfo(string itemName, string memberItemName)
        {
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling ItemsApi->AddMember");
            // verify the required parameter 'memberItemName' is set
            if (memberItemName == null)
                throw new ApiException(400, "Missing required parameter 'memberItemName' when calling ItemsApi->AddMember");

            var localVarPath = "/items/{itemName}/members/{memberItemName}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemName != null) localVarPathParams.Add("itemName", Configuration.ApiClient.ParameterToString(itemName)); // path parameter
            if (memberItemName != null) localVarPathParams.Add("memberItemName", Configuration.ApiClient.ParameterToString(memberItemName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds metadata to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <param name="body">metadata</param>
        /// <returns></returns>
        public void AddMetadata(string itemname, string _namespace, MetadataDTO body)
        {
            AddMetadataWithHttpInfo(itemname, _namespace, body);
        }

        /// <summary>
        /// Adds metadata to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <param name="body">metadata</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> AddMetadataWithHttpInfo(string itemname, string _namespace, MetadataDTO body)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->AddMetadata");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ItemsApi->AddMetadata");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->AddMetadata");

            var localVarPath = "/items/{itemname}/metadata/{namespace}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds metadata to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <param name="body">metadata</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddMetadataAsync(string itemname, string _namespace, MetadataDTO body)
        {
            await AddMetadataAsyncWithHttpInfo(itemname, _namespace, body);

        }

        /// <summary>
        /// Adds metadata to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <param name="body">metadata</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> AddMetadataAsyncWithHttpInfo(string itemname, string _namespace, MetadataDTO body)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->AddMetadata");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ItemsApi->AddMetadata");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->AddMetadata");

            var localVarPath = "/items/{itemname}/metadata/{namespace}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a tag to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns></returns>
        public void AddTag(string itemname, string tag)
        {
            AddTagWithHttpInfo(itemname, tag);
        }

        /// <summary>
        /// Adds a tag to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> AddTagWithHttpInfo(string itemname, string tag)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->AddTag");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ItemsApi->AddTag");

            var localVarPath = "/items/{itemname}/tags/{tag}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a tag to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddTagAsync(string itemname, string tag)
        {
            await AddTagAsyncWithHttpInfo(itemname, tag);

        }

        /// <summary>
        /// Adds a tag to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> AddTagAsyncWithHttpInfo(string itemname, string tag)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->AddTag");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ItemsApi->AddTag");

            var localVarPath = "/items/{itemname}/tags/{tag}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a new item to the registry or updates the existing item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">item data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>string</returns>
        public string CreateOrUpdateItem(string itemname, GroupItemDTO body, string acceptLanguage = null)
        {
            ApiResponse<string> localVarResponse = CreateOrUpdateItemWithHttpInfo(itemname, body, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new item to the registry or updates the existing item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">item data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> CreateOrUpdateItemWithHttpInfo(string itemname, GroupItemDTO body, string acceptLanguage = null)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->CreateOrUpdateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->CreateOrUpdateItem");

            var localVarPath = "/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Adds a new item to the registry or updates the existing item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">item data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateOrUpdateItemAsync(string itemname, GroupItemDTO body, string acceptLanguage = null)
        {
            ApiResponse<string> localVarResponse = await CreateOrUpdateItemAsyncWithHttpInfo(itemname, body, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new item to the registry or updates the existing item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">item data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CreateOrUpdateItemAsyncWithHttpInfo(string itemname, GroupItemDTO body, string acceptLanguage = null)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->CreateOrUpdateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->CreateOrUpdateItem");

            var localVarPath = "/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Adds a list of items to the registry or updates the existing items.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">array of item data</param>
        /// <returns>string</returns>
        public string CreateOrUpdateItems(List<GroupItemDTO> body)
        {
            ApiResponse<string> localVarResponse = CreateOrUpdateItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a list of items to the registry or updates the existing items.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">array of item data</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> CreateOrUpdateItemsWithHttpInfo(List<GroupItemDTO> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->CreateOrUpdateItems");

            var localVarPath = "/items";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Adds a list of items to the registry or updates the existing items.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">array of item data</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateOrUpdateItemsAsync(List<GroupItemDTO> body)
        {
            ApiResponse<string> localVarResponse = await CreateOrUpdateItemsAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a list of items to the registry or updates the existing items.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">array of item data</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CreateOrUpdateItemsAsyncWithHttpInfo(List<GroupItemDTO> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->CreateOrUpdateItems");

            var localVarPath = "/items";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdateItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets a single item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <returns>EnrichedItemDTO</returns>
        public EnrichedItemDTO GetItemData(string itemname, string acceptLanguage = null, string metadata = null)
        {
            ApiResponse<EnrichedItemDTO> localVarResponse = GetItemDataWithHttpInfo(itemname, acceptLanguage, metadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a single item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <returns>ApiResponse of EnrichedItemDTO</returns>
        public ApiResponse<EnrichedItemDTO> GetItemDataWithHttpInfo(string itemname, string acceptLanguage = null, string metadata = null)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->GetItemData");

            var localVarPath = "/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (metadata != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata", metadata)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrichedItemDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrichedItemDTO)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrichedItemDTO)));
        }

        /// <summary>
        /// Gets a single item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <returns>Task of EnrichedItemDTO</returns>
        public async System.Threading.Tasks.Task<EnrichedItemDTO> GetItemDataAsync(string itemname, string acceptLanguage = null, string metadata = null)
        {
            ApiResponse<EnrichedItemDTO> localVarResponse = await GetItemDataAsyncWithHttpInfo(itemname, acceptLanguage, metadata);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a single item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <returns>Task of ApiResponse (EnrichedItemDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnrichedItemDTO>> GetItemDataAsyncWithHttpInfo(string itemname, string acceptLanguage = null, string metadata = null)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->GetItemData");

            var localVarPath = "/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (metadata != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata", metadata)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrichedItemDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrichedItemDTO)Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrichedItemDTO)));
        }

        /// <summary>
        /// Get all available items.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type">item type filter (optional)</param>
        /// <param name="tags">item tag filter (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <param name="recursive">get member items recursively (optional, default to false)</param>
        /// <param name="fields">limit output to the given fields (comma separated) (optional)</param>
        /// <returns>List&lt;EnrichedItemDTO&gt;</returns>
        public List<EnrichedItemDTO> GetItems(string acceptLanguage = null, string type = null, string tags = null, string metadata = null, bool? recursive = null, string fields = null)
        {
            ApiResponse<List<EnrichedItemDTO>> localVarResponse = GetItemsWithHttpInfo(acceptLanguage, type, tags, metadata, recursive, fields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available items.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type">item type filter (optional)</param>
        /// <param name="tags">item tag filter (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <param name="recursive">get member items recursively (optional, default to false)</param>
        /// <param name="fields">limit output to the given fields (comma separated) (optional)</param>
        /// <returns>ApiResponse of List&lt;EnrichedItemDTO&gt;</returns>
        public ApiResponse<List<EnrichedItemDTO>> GetItemsWithHttpInfo(string acceptLanguage = null, string type = null, string tags = null, string metadata = null, bool? recursive = null, string fields = null)
        {

            var localVarPath = "/items";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata", metadata)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "recursive", recursive)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EnrichedItemDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EnrichedItemDTO>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EnrichedItemDTO>)));
        }

        /// <summary>
        /// Get all available items.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type">item type filter (optional)</param>
        /// <param name="tags">item tag filter (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <param name="recursive">get member items recursively (optional, default to false)</param>
        /// <param name="fields">limit output to the given fields (comma separated) (optional)</param>
        /// <returns>Task of List&lt;EnrichedItemDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EnrichedItemDTO>> GetItemsAsync(string acceptLanguage = null, string type = null, string tags = null, string metadata = null, bool? recursive = null, string fields = null)
        {
            ApiResponse<List<EnrichedItemDTO>> localVarResponse = await GetItemsAsyncWithHttpInfo(acceptLanguage, type, tags, metadata, recursive, fields);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available items.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="type">item type filter (optional)</param>
        /// <param name="tags">item tag filter (optional)</param>
        /// <param name="metadata">metadata selector (optional)</param>
        /// <param name="recursive">get member items recursively (optional, default to false)</param>
        /// <param name="fields">limit output to the given fields (comma separated) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EnrichedItemDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EnrichedItemDTO>>> GetItemsAsyncWithHttpInfo(string acceptLanguage = null, string type = null, string tags = null, string metadata = null, bool? recursive = null, string fields = null)
        {

            var localVarPath = "/items";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata", metadata)); // query parameter
            if (recursive != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "recursive", recursive)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EnrichedItemDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EnrichedItemDTO>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EnrichedItemDTO>)));
        }

        /// <summary>
        /// Gets the state of an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>string</returns>
        public string GetPlainItemState(string itemname)
        {
            ApiResponse<string> localVarResponse = GetPlainItemStateWithHttpInfo(itemname);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the state of an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetPlainItemStateWithHttpInfo(string itemname)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->GetPlainItemState");

            var localVarPath = "/items/{itemname}/state";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "text/plain"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlainItemState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the state of an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetPlainItemStateAsync(string itemname)
        {
            ApiResponse<string> localVarResponse = await GetPlainItemStateAsyncWithHttpInfo(itemname);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the state of an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetPlainItemStateAsyncWithHttpInfo(string itemname)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->GetPlainItemState");

            var localVarPath = "/items/{itemname}/state";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "text/plain"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlainItemState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Sends a command to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)</param>
        /// <returns></returns>
        public void PostItemCommand(string itemname, string body)
        {
            PostItemCommandWithHttpInfo(itemname, body);
        }

        /// <summary>
        /// Sends a command to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> PostItemCommandWithHttpInfo(string itemname, string body)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->PostItemCommand");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->PostItemCommand");

            var localVarPath = "/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "text/plain"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sends a command to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostItemCommandAsync(string itemname, string body)
        {
            await PostItemCommandAsyncWithHttpInfo(itemname, body);

        }

        /// <summary>
        /// Sends a command to an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> PostItemCommandAsyncWithHttpInfo(string itemname, string body)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->PostItemCommand");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->PostItemCommand");

            var localVarPath = "/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "text/plain"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            localVarPostBody = body;

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemCommand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the state of an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item state (e.g. ON, OFF)</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns></returns>
        public void PutItemState(string itemname, string body, string acceptLanguage = null)
        {
            PutItemStateWithHttpInfo(itemname, body, acceptLanguage);
        }

        /// <summary>
        /// Updates the state of an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item state (e.g. ON, OFF)</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> PutItemStateWithHttpInfo(string itemname, string body, string acceptLanguage = null)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->PutItemState");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->PutItemState");

            var localVarPath = "/items/{itemname}/state";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "text/plain"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutItemState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the state of an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item state (e.g. ON, OFF)</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutItemStateAsync(string itemname, string body, string acceptLanguage = null)
        {
            await PutItemStateAsyncWithHttpInfo(itemname, body, acceptLanguage);

        }

        /// <summary>
        /// Updates the state of an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="body">valid item state (e.g. ON, OFF)</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> PutItemStateAsyncWithHttpInfo(string itemname, string body, string acceptLanguage = null)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->PutItemState");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ItemsApi->PutItemState");

            var localVarPath = "/items/{itemname}/state";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "text/plain"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            if (double.TryParse(body, out var value))
            {
                localVarPostBody = value;
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutItemState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes an item from the registry.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns></returns>
        public void RemoveItem(string itemname)
        {
            RemoveItemWithHttpInfo(itemname);
        }

        /// <summary>
        /// Removes an item from the registry.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> RemoveItemWithHttpInfo(string itemname)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->RemoveItem");

            var localVarPath = "/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes an item from the registry.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveItemAsync(string itemname)
        {
            await RemoveItemAsyncWithHttpInfo(itemname);

        }

        /// <summary>
        /// Removes an item from the registry.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RemoveItemAsyncWithHttpInfo(string itemname)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->RemoveItem");

            var localVarPath = "/items/{itemname}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes an existing member from a group item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns></returns>
        public void RemoveMember(string itemName, string memberItemName)
        {
            RemoveMemberWithHttpInfo(itemName, memberItemName);
        }

        /// <summary>
        /// Removes an existing member from a group item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> RemoveMemberWithHttpInfo(string itemName, string memberItemName)
        {
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling ItemsApi->RemoveMember");
            // verify the required parameter 'memberItemName' is set
            if (memberItemName == null)
                throw new ApiException(400, "Missing required parameter 'memberItemName' when calling ItemsApi->RemoveMember");

            var localVarPath = "/items/{itemName}/members/{memberItemName}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemName != null) localVarPathParams.Add("itemName", Configuration.ApiClient.ParameterToString(itemName)); // path parameter
            if (memberItemName != null) localVarPathParams.Add("memberItemName", Configuration.ApiClient.ParameterToString(memberItemName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes an existing member from a group item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveMemberAsync(string itemName, string memberItemName)
        {
            await RemoveMemberAsyncWithHttpInfo(itemName, memberItemName);

        }

        /// <summary>
        /// Removes an existing member from a group item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemName">item name</param>
        /// <param name="memberItemName">member item name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RemoveMemberAsyncWithHttpInfo(string itemName, string memberItemName)
        {
            // verify the required parameter 'itemName' is set
            if (itemName == null)
                throw new ApiException(400, "Missing required parameter 'itemName' when calling ItemsApi->RemoveMember");
            // verify the required parameter 'memberItemName' is set
            if (memberItemName == null)
                throw new ApiException(400, "Missing required parameter 'memberItemName' when calling ItemsApi->RemoveMember");

            var localVarPath = "/items/{itemName}/members/{memberItemName}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemName != null) localVarPathParams.Add("itemName", Configuration.ApiClient.ParameterToString(itemName)); // path parameter
            if (memberItemName != null) localVarPathParams.Add("memberItemName", Configuration.ApiClient.ParameterToString(memberItemName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes metadata from an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <returns></returns>
        public void RemoveMetadata(string itemname, string _namespace)
        {
            RemoveMetadataWithHttpInfo(itemname, _namespace);
        }

        /// <summary>
        /// Removes metadata from an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> RemoveMetadataWithHttpInfo(string itemname, string _namespace)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->RemoveMetadata");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ItemsApi->RemoveMetadata");

            var localVarPath = "/items/{itemname}/metadata/{namespace}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes metadata from an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveMetadataAsync(string itemname, string _namespace)
        {
            await RemoveMetadataAsyncWithHttpInfo(itemname, _namespace);

        }

        /// <summary>
        /// Removes metadata from an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="_namespace">namespace</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RemoveMetadataAsyncWithHttpInfo(string itemname, string _namespace)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->RemoveMetadata");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling ItemsApi->RemoveMetadata");

            var localVarPath = "/items/{itemname}/metadata/{namespace}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a tag from an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns></returns>
        public void RemoveTag(string itemname, string tag)
        {
            RemoveTagWithHttpInfo(itemname, tag);
        }

        /// <summary>
        /// Removes a tag from an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> RemoveTagWithHttpInfo(string itemname, string tag)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->RemoveTag");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ItemsApi->RemoveTag");

            var localVarPath = "/items/{itemname}/tags/{tag}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a tag from an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveTagAsync(string itemname, string tag)
        {
            await RemoveTagAsyncWithHttpInfo(itemname, tag);

        }

        /// <summary>
        /// Removes a tag from an item.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemname">item name</param>
        /// <param name="tag">tag</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RemoveTagAsyncWithHttpInfo(string itemname, string tag)
        {
            // verify the required parameter 'itemname' is set
            if (itemname == null)
                throw new ApiException(400, "Missing required parameter 'itemname' when calling ItemsApi->RemoveTag");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ItemsApi->RemoveTag");

            var localVarPath = "/items/{itemname}/tags/{tag}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemname != null) localVarPathParams.Add("itemname", Configuration.ApiClient.ParameterToString(itemname)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
