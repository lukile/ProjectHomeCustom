/* 
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Openhab.Client.Client;
using Openhab.Client.Model;
using RestSharp;

namespace Openhab.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IThingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new thing and adds it to the registry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">thing data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>string</returns>
        string Create (ThingDTO body, string acceptLanguage = null);

        /// <summary>
        /// Creates a new thing and adds it to the registry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">thing data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateWithHttpInfo (ThingDTO body, string acceptLanguage = null);
        /// <summary>
        /// Get all available things.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>List&lt;EnrichedThingDTO&gt;</returns>
        List<EnrichedThingDTO> GetAll (string acceptLanguage = null);

        /// <summary>
        /// Get all available things.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of List&lt;EnrichedThingDTO&gt;</returns>
        ApiResponse<List<EnrichedThingDTO>> GetAllWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Gets thing by UID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ThingDTO</returns>
        ThingDTO GetByUID (string thingUID, string acceptLanguage = null);

        /// <summary>
        /// Gets thing by UID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of ThingDTO</returns>
        ApiResponse<ThingDTO> GetByUIDWithHttpInfo (string thingUID, string acceptLanguage = null);
        /// <summary>
        /// Gets thing&#39;s config status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        string GetConfigStatus (string thingUID, string acceptLanguage = null);

        /// <summary>
        /// Gets thing&#39;s config status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetConfigStatusWithHttpInfo (string thingUID, string acceptLanguage = null);
        /// <summary>
        /// Gets thing&#39;s firmware status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        void GetFirmwareStatus (string thingUID, string acceptLanguage = null);

        /// <summary>
        /// Gets thing&#39;s firmware status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> GetFirmwareStatusWithHttpInfo (string thingUID, string acceptLanguage = null);
        /// <summary>
        /// Get all available firmwares for provided thing UID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns></returns>
        void GetFirmwares (string thingUID, string acceptLanguage = null);

        /// <summary>
        /// Get all available firmwares for provided thing UID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> GetFirmwaresWithHttpInfo (string thingUID, string acceptLanguage = null);
        /// <summary>
        /// Gets thing&#39;s status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        string GetStatus (string thingUID, string acceptLanguage = null);

        /// <summary>
        /// Gets thing&#39;s status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetStatusWithHttpInfo (string thingUID, string acceptLanguage = null);
        /// <summary>
        /// Removes a thing from the registry. Set &#39;force&#39; to __true__ if you want the thing te be removed immediately.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="force">force (optional, default to false)</param>
        /// <returns></returns>
        void Remove (string thingUID, string acceptLanguage = null, bool? force = null);

        /// <summary>
        /// Removes a thing from the registry. Set &#39;force&#39; to __true__ if you want the thing te be removed immediately.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="force">force (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> RemoveWithHttpInfo (string thingUID, string acceptLanguage = null, bool? force = null);
        /// <summary>
        /// Sets the thing enabled status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">enabled (optional)</param>
        /// <returns>string</returns>
        string SetEnabled (string thingUID, string acceptLanguage = null, string body = null);

        /// <summary>
        /// Sets the thing enabled status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">enabled (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetEnabledWithHttpInfo (string thingUID, string acceptLanguage = null, string body = null);
        /// <summary>
        /// Updates a thing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="body">thing</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ThingDTO</returns>
        ThingDTO Update (string thingUID, ThingDTO body, string acceptLanguage = null);

        /// <summary>
        /// Updates a thing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="body">thing</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of ThingDTO</returns>
        ApiResponse<ThingDTO> UpdateWithHttpInfo (string thingUID, ThingDTO body, string acceptLanguage = null);
        /// <summary>
        /// Updates thing&#39;s configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">configuration parameters (optional)</param>
        /// <returns>ThingDTO</returns>
        ThingDTO UpdateConfiguration (string thingUID, string acceptLanguage = null, object body = null);

        /// <summary>
        /// Updates thing&#39;s configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">configuration parameters (optional)</param>
        /// <returns>ApiResponse of ThingDTO</returns>
        ApiResponse<ThingDTO> UpdateConfigurationWithHttpInfo (string thingUID, string acceptLanguage = null, object body = null);
        /// <summary>
        /// Update thing firmware.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="firmwareVersion">version</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns></returns>
        void UpdateFirmware (string thingUID, string firmwareVersion, string acceptLanguage = null);

        /// <summary>
        /// Update thing firmware.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="firmwareVersion">version</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UpdateFirmwareWithHttpInfo (string thingUID, string firmwareVersion, string acceptLanguage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new thing and adds it to the registry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">thing data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateAsync (ThingDTO body, string acceptLanguage = null);

        /// <summary>
        /// Creates a new thing and adds it to the registry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">thing data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateAsyncWithHttpInfo (ThingDTO body, string acceptLanguage = null);
        /// <summary>
        /// Get all available things.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of List&lt;EnrichedThingDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EnrichedThingDTO>> GetAllAsync (string acceptLanguage = null);

        /// <summary>
        /// Get all available things.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EnrichedThingDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EnrichedThingDTO>>> GetAllAsyncWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Gets thing by UID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ThingDTO</returns>
        System.Threading.Tasks.Task<ThingDTO> GetByUIDAsync (string thingUID, string acceptLanguage = null);

        /// <summary>
        /// Gets thing by UID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse (ThingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThingDTO>> GetByUIDAsyncWithHttpInfo (string thingUID, string acceptLanguage = null);
        /// <summary>
        /// Gets thing&#39;s config status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetConfigStatusAsync (string thingUID, string acceptLanguage = null);

        /// <summary>
        /// Gets thing&#39;s config status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetConfigStatusAsyncWithHttpInfo (string thingUID, string acceptLanguage = null);
        /// <summary>
        /// Gets thing&#39;s firmware status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFirmwareStatusAsync (string thingUID, string acceptLanguage = null);

        /// <summary>
        /// Gets thing&#39;s firmware status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> GetFirmwareStatusAsyncWithHttpInfo (string thingUID, string acceptLanguage = null);
        /// <summary>
        /// Get all available firmwares for provided thing UID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetFirmwaresAsync (string thingUID, string acceptLanguage = null);

        /// <summary>
        /// Get all available firmwares for provided thing UID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> GetFirmwaresAsyncWithHttpInfo (string thingUID, string acceptLanguage = null);
        /// <summary>
        /// Gets thing&#39;s status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetStatusAsync (string thingUID, string acceptLanguage = null);

        /// <summary>
        /// Gets thing&#39;s status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetStatusAsyncWithHttpInfo (string thingUID, string acceptLanguage = null);
        /// <summary>
        /// Removes a thing from the registry. Set &#39;force&#39; to __true__ if you want the thing te be removed immediately.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="force">force (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAsync (string thingUID, string acceptLanguage = null, bool? force = null);

        /// <summary>
        /// Removes a thing from the registry. Set &#39;force&#39; to __true__ if you want the thing te be removed immediately.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="force">force (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> RemoveAsyncWithHttpInfo (string thingUID, string acceptLanguage = null, bool? force = null);
        /// <summary>
        /// Sets the thing enabled status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">enabled (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetEnabledAsync (string thingUID, string acceptLanguage = null, string body = null);

        /// <summary>
        /// Sets the thing enabled status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">enabled (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetEnabledAsyncWithHttpInfo (string thingUID, string acceptLanguage = null, string body = null);
        /// <summary>
        /// Updates a thing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="body">thing</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ThingDTO</returns>
        System.Threading.Tasks.Task<ThingDTO> UpdateAsync (string thingUID, ThingDTO body, string acceptLanguage = null);

        /// <summary>
        /// Updates a thing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="body">thing</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse (ThingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThingDTO>> UpdateAsyncWithHttpInfo (string thingUID, ThingDTO body, string acceptLanguage = null);
        /// <summary>
        /// Updates thing&#39;s configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">configuration parameters (optional)</param>
        /// <returns>Task of ThingDTO</returns>
        System.Threading.Tasks.Task<ThingDTO> UpdateConfigurationAsync (string thingUID, string acceptLanguage = null, object body = null);

        /// <summary>
        /// Updates thing&#39;s configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">configuration parameters (optional)</param>
        /// <returns>Task of ApiResponse (ThingDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThingDTO>> UpdateConfigurationAsyncWithHttpInfo (string thingUID, string acceptLanguage = null, object body = null);
        /// <summary>
        /// Update thing firmware.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="firmwareVersion">version</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFirmwareAsync (string thingUID, string firmwareVersion, string acceptLanguage = null);

        /// <summary>
        /// Update thing firmware.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="firmwareVersion">version</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UpdateFirmwareAsyncWithHttpInfo (string thingUID, string firmwareVersion, string acceptLanguage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ThingsApi : IThingsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ThingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ThingsApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ThingsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new thing and adds it to the registry. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">thing data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>string</returns>
        public string Create (ThingDTO body, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = CreateWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new thing and adds it to the registry. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">thing data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CreateWithHttpInfo (ThingDTO body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThingsApi->Create");

            var localVarPath = "/things";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Creates a new thing and adds it to the registry. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">thing data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateAsync (ThingDTO body, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = await CreateAsyncWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new thing and adds it to the registry. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">thing data</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CreateAsyncWithHttpInfo (ThingDTO body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThingsApi->Create");

            var localVarPath = "/things";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all available things. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>List&lt;EnrichedThingDTO&gt;</returns>
        public List<EnrichedThingDTO> GetAll (string acceptLanguage = null)
        {
             ApiResponse<List<EnrichedThingDTO>> localVarResponse = GetAllWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available things. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of List&lt;EnrichedThingDTO&gt;</returns>
        public ApiResponse< List<EnrichedThingDTO> > GetAllWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/things";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EnrichedThingDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EnrichedThingDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EnrichedThingDTO>)));
        }

        /// <summary>
        /// Get all available things. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of List&lt;EnrichedThingDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EnrichedThingDTO>> GetAllAsync (string acceptLanguage = null)
        {
             ApiResponse<List<EnrichedThingDTO>> localVarResponse = await GetAllAsyncWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available things. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EnrichedThingDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EnrichedThingDTO>>> GetAllAsyncWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/things";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EnrichedThingDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EnrichedThingDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EnrichedThingDTO>)));
        }

        /// <summary>
        /// Gets thing by UID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ThingDTO</returns>
        public ThingDTO GetByUID (string thingUID, string acceptLanguage = null)
        {
             ApiResponse<ThingDTO> localVarResponse = GetByUIDWithHttpInfo(thingUID, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets thing by UID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of ThingDTO</returns>
        public ApiResponse< ThingDTO > GetByUIDWithHttpInfo (string thingUID, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->GetByUID");

            var localVarPath = "/things/{thingUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByUID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThingDTO)));
        }

        /// <summary>
        /// Gets thing by UID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ThingDTO</returns>
        public async System.Threading.Tasks.Task<ThingDTO> GetByUIDAsync (string thingUID, string acceptLanguage = null)
        {
             ApiResponse<ThingDTO> localVarResponse = await GetByUIDAsyncWithHttpInfo(thingUID, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets thing by UID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse (ThingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThingDTO>> GetByUIDAsyncWithHttpInfo (string thingUID, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->GetByUID");

            var localVarPath = "/things/{thingUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByUID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThingDTO)));
        }

        /// <summary>
        /// Gets thing&#39;s config status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        public string GetConfigStatus (string thingUID, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = GetConfigStatusWithHttpInfo(thingUID, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets thing&#39;s config status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetConfigStatusWithHttpInfo (string thingUID, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->GetConfigStatus");

            var localVarPath = "/things/{thingUID}/config/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfigStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets thing&#39;s config status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetConfigStatusAsync (string thingUID, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = await GetConfigStatusAsyncWithHttpInfo(thingUID, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets thing&#39;s config status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetConfigStatusAsyncWithHttpInfo (string thingUID, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->GetConfigStatus");

            var localVarPath = "/things/{thingUID}/config/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfigStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets thing&#39;s firmware status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        public void GetFirmwareStatus (string thingUID, string acceptLanguage = null)
        {
             GetFirmwareStatusWithHttpInfo(thingUID, acceptLanguage);
        }

        /// <summary>
        /// Gets thing&#39;s firmware status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> GetFirmwareStatusWithHttpInfo (string thingUID, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->GetFirmwareStatus");

            var localVarPath = "/things/{thingUID}/firmware/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFirmwareStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets thing&#39;s firmware status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFirmwareStatusAsync (string thingUID, string acceptLanguage = null)
        {
             await GetFirmwareStatusAsyncWithHttpInfo(thingUID, acceptLanguage);

        }

        /// <summary>
        /// Gets thing&#39;s firmware status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> GetFirmwareStatusAsyncWithHttpInfo (string thingUID, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->GetFirmwareStatus");

            var localVarPath = "/things/{thingUID}/firmware/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFirmwareStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all available firmwares for provided thing UID 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns></returns>
        public void GetFirmwares (string thingUID, string acceptLanguage = null)
        {
             GetFirmwaresWithHttpInfo(thingUID, acceptLanguage);
        }

        /// <summary>
        /// Get all available firmwares for provided thing UID 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> GetFirmwaresWithHttpInfo (string thingUID, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->GetFirmwares");

            var localVarPath = "/things/{thingUID}/firmwares";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFirmwares", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all available firmwares for provided thing UID 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetFirmwaresAsync (string thingUID, string acceptLanguage = null)
        {
             await GetFirmwaresAsyncWithHttpInfo(thingUID, acceptLanguage);

        }

        /// <summary>
        /// Get all available firmwares for provided thing UID 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">Accept-Language (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> GetFirmwaresAsyncWithHttpInfo (string thingUID, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->GetFirmwares");

            var localVarPath = "/things/{thingUID}/firmwares";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFirmwares", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets thing&#39;s status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        public string GetStatus (string thingUID, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = GetStatusWithHttpInfo(thingUID, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets thing&#39;s status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetStatusWithHttpInfo (string thingUID, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->GetStatus");

            var localVarPath = "/things/{thingUID}/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets thing&#39;s status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetStatusAsync (string thingUID, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = await GetStatusAsyncWithHttpInfo(thingUID, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets thing&#39;s status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetStatusAsyncWithHttpInfo (string thingUID, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->GetStatus");

            var localVarPath = "/things/{thingUID}/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Removes a thing from the registry. Set &#39;force&#39; to __true__ if you want the thing te be removed immediately. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="force">force (optional, default to false)</param>
        /// <returns></returns>
        public void Remove (string thingUID, string acceptLanguage = null, bool? force = null)
        {
             RemoveWithHttpInfo(thingUID, acceptLanguage, force);
        }

        /// <summary>
        /// Removes a thing from the registry. Set &#39;force&#39; to __true__ if you want the thing te be removed immediately. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="force">force (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> RemoveWithHttpInfo (string thingUID, string acceptLanguage = null, bool? force = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->Remove");

            var localVarPath = "/things/{thingUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (force != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a thing from the registry. Set &#39;force&#39; to __true__ if you want the thing te be removed immediately. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="force">force (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAsync (string thingUID, string acceptLanguage = null, bool? force = null)
        {
             await RemoveAsyncWithHttpInfo(thingUID, acceptLanguage, force);

        }

        /// <summary>
        /// Removes a thing from the registry. Set &#39;force&#39; to __true__ if you want the thing te be removed immediately. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <param name="force">force (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RemoveAsyncWithHttpInfo (string thingUID, string acceptLanguage = null, bool? force = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->Remove");

            var localVarPath = "/things/{thingUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (force != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the thing enabled status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">enabled (optional)</param>
        /// <returns>string</returns>
        public string SetEnabled (string thingUID, string acceptLanguage = null, string body = null)
        {
             ApiResponse<string> localVarResponse = SetEnabledWithHttpInfo(thingUID, acceptLanguage, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the thing enabled status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">enabled (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetEnabledWithHttpInfo (string thingUID, string acceptLanguage = null, string body = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->SetEnabled");

            var localVarPath = "/things/{thingUID}/enable";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Sets the thing enabled status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">enabled (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetEnabledAsync (string thingUID, string acceptLanguage = null, string body = null)
        {
             ApiResponse<string> localVarResponse = await SetEnabledAsyncWithHttpInfo(thingUID, acceptLanguage, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the thing enabled status. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">enabled (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetEnabledAsyncWithHttpInfo (string thingUID, string acceptLanguage = null, string body = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->SetEnabled");

            var localVarPath = "/things/{thingUID}/enable";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Updates a thing. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="body">thing</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ThingDTO</returns>
        public ThingDTO Update (string thingUID, ThingDTO body, string acceptLanguage = null)
        {
             ApiResponse<ThingDTO> localVarResponse = UpdateWithHttpInfo(thingUID, body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a thing. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="body">thing</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of ThingDTO</returns>
        public ApiResponse< ThingDTO > UpdateWithHttpInfo (string thingUID, ThingDTO body, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->Update");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThingsApi->Update");

            var localVarPath = "/things/{thingUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThingDTO)));
        }

        /// <summary>
        /// Updates a thing. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="body">thing</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ThingDTO</returns>
        public async System.Threading.Tasks.Task<ThingDTO> UpdateAsync (string thingUID, ThingDTO body, string acceptLanguage = null)
        {
             ApiResponse<ThingDTO> localVarResponse = await UpdateAsyncWithHttpInfo(thingUID, body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a thing. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thingUID</param>
        /// <param name="body">thing</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse (ThingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThingDTO>> UpdateAsyncWithHttpInfo (string thingUID, ThingDTO body, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->Update");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ThingsApi->Update");

            var localVarPath = "/things/{thingUID}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThingDTO)));
        }

        /// <summary>
        /// Updates thing&#39;s configuration. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">configuration parameters (optional)</param>
        /// <returns>ThingDTO</returns>
        public ThingDTO UpdateConfiguration (string thingUID, string acceptLanguage = null, object body = null)
        {
             ApiResponse<ThingDTO> localVarResponse = UpdateConfigurationWithHttpInfo(thingUID, acceptLanguage, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates thing&#39;s configuration. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">configuration parameters (optional)</param>
        /// <returns>ApiResponse of ThingDTO</returns>
        public ApiResponse< ThingDTO > UpdateConfigurationWithHttpInfo (string thingUID, string acceptLanguage = null, object body = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->UpdateConfiguration");

            var localVarPath = "/things/{thingUID}/config";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThingDTO)));
        }

        /// <summary>
        /// Updates thing&#39;s configuration. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">configuration parameters (optional)</param>
        /// <returns>Task of ThingDTO</returns>
        public async System.Threading.Tasks.Task<ThingDTO> UpdateConfigurationAsync (string thingUID, string acceptLanguage = null, object body = null)
        {
             ApiResponse<ThingDTO> localVarResponse = await UpdateConfigurationAsyncWithHttpInfo(thingUID, acceptLanguage, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates thing&#39;s configuration. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="body">configuration parameters (optional)</param>
        /// <returns>Task of ApiResponse (ThingDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThingDTO>> UpdateConfigurationAsyncWithHttpInfo (string thingUID, string acceptLanguage = null, object body = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->UpdateConfiguration");

            var localVarPath = "/things/{thingUID}/config";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThingDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ThingDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThingDTO)));
        }

        /// <summary>
        /// Update thing firmware. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="firmwareVersion">version</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns></returns>
        public void UpdateFirmware (string thingUID, string firmwareVersion, string acceptLanguage = null)
        {
             UpdateFirmwareWithHttpInfo(thingUID, firmwareVersion, acceptLanguage);
        }

        /// <summary>
        /// Update thing firmware. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="firmwareVersion">version</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UpdateFirmwareWithHttpInfo (string thingUID, string firmwareVersion, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->UpdateFirmware");
            // verify the required parameter 'firmwareVersion' is set
            if (firmwareVersion == null)
                throw new ApiException(400, "Missing required parameter 'firmwareVersion' when calling ThingsApi->UpdateFirmware");

            var localVarPath = "/things/{thingUID}/firmware/{firmwareVersion}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (firmwareVersion != null) localVarPathParams.Add("firmwareVersion", Configuration.ApiClient.ParameterToString(firmwareVersion)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFirmware", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update thing firmware. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="firmwareVersion">version</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFirmwareAsync (string thingUID, string firmwareVersion, string acceptLanguage = null)
        {
             await UpdateFirmwareAsyncWithHttpInfo(thingUID, firmwareVersion, acceptLanguage);

        }

        /// <summary>
        /// Update thing firmware. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingUID">thing</param>
        /// <param name="firmwareVersion">version</param>
        /// <param name="acceptLanguage">language (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UpdateFirmwareAsyncWithHttpInfo (string thingUID, string firmwareVersion, string acceptLanguage = null)
        {
            // verify the required parameter 'thingUID' is set
            if (thingUID == null)
                throw new ApiException(400, "Missing required parameter 'thingUID' when calling ThingsApi->UpdateFirmware");
            // verify the required parameter 'firmwareVersion' is set
            if (firmwareVersion == null)
                throw new ApiException(400, "Missing required parameter 'firmwareVersion' when calling ThingsApi->UpdateFirmware");

            var localVarPath = "/things/{thingUID}/firmware/{firmwareVersion}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingUID != null) localVarPathParams.Add("thingUID", Configuration.ApiClient.ParameterToString(thingUID)); // path parameter
            if (firmwareVersion != null) localVarPathParams.Add("firmwareVersion", Configuration.ApiClient.ParameterToString(firmwareVersion)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFirmware", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
